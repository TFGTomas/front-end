[{"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\pages\\api\\hello.ts":"1","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\pages\\index.tsx":"2","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\pages\\_app.tsx":"3","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\pages\\_document.tsx":"4","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\cryptoData.ts":"5","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\exchangesData.ts":"6","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\invoice.tsx":"7","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\paymentData.tsx":"8","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\paymentSteps.tsx":"9","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\pedingConnection.tsx":"10","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\profile.tsx":"11","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\selectorCrypto.tsx":"12","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\selectorWalletsExchanges.tsx":"13","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\stepper.tsx":"14","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\index.tsx":"15"},{"size":320,"mtime":1689003114007,"results":"16","hashOfConfig":"17"},{"size":335,"mtime":1689068133030,"results":"18","hashOfConfig":"17"},{"size":1892,"mtime":1689070019896,"results":"19","hashOfConfig":"17"},{"size":411,"mtime":1689070058414,"results":"20","hashOfConfig":"17"},{"size":71144,"mtime":1689003113902,"results":"21","hashOfConfig":"17"},{"size":1424,"mtime":1689067381977,"results":"22","hashOfConfig":"17"},{"size":4999,"mtime":1689003113902,"results":"23","hashOfConfig":"17"},{"size":65690,"mtime":1689070229932,"results":"24","hashOfConfig":"17"},{"size":2582,"mtime":1689004500040,"results":"25","hashOfConfig":"17"},{"size":5236,"mtime":1689070242285,"results":"26","hashOfConfig":"17"},{"size":510,"mtime":1689003113904,"results":"27","hashOfConfig":"17"},{"size":5268,"mtime":1689071169096,"results":"28","hashOfConfig":"17"},{"size":4748,"mtime":1689070259131,"results":"29","hashOfConfig":"17"},{"size":1172,"mtime":1689003113905,"results":"30","hashOfConfig":"17"},{"size":21874,"mtime":1689069787800,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ic6blf",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\pages\\api\\hello.ts",[],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\pages\\index.tsx",[],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\pages\\_app.tsx",[],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\pages\\_document.tsx",["78"],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\cryptoData.ts",[],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\exchangesData.ts",[],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\invoice.tsx",[],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\paymentData.tsx",["79","80","81","82","83","84","85","86"],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\paymentSteps.tsx",[],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\pedingConnection.tsx",["87","88","89"],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\profile.tsx",[],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\selectorCrypto.tsx",["90"],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\selectorWalletsExchanges.tsx",["91","92"],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\stepper.tsx",[],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\index.tsx",["93","94","95","96"],[],"import { useAccount, useConnect, useEnsName, useDisconnect, useNetwork, useSwitchNetwork, useContractWrite, useContractRead, useSendTransaction, usePrepareContractWrite } from 'wagmi'\r\nimport { useBalance } from 'wagmi'\r\nimport React, { useState, useEffect, ChangeEvent } from 'react';\r\nimport { useRouter } from 'next/router';\r\nimport { Exchange, Wallet, Crypto, Network } from '@/definitions/global';\r\nimport { IselectorWalletsExchangesProps } from '@/components/selectorWalletsExchanges';\r\nimport PendingConnection, { IPedingConnectionProps } from '@/components/pedingConnection';\r\nimport Stepper from '@/components/stepper';\r\nimport SelectorCrypto, { ISelectorCryptoProps } from '@/components/selectorCrypto';\r\nimport Invoice, { IInvoiceProps } from '@/components/invoice';\r\nimport PaymentData, { IPaymentDataProps } from '@/components/paymentData';\r\nimport contractABI3 from './data.json';\r\nimport { ethers } from 'ethers';\r\nimport { parseEther, parseGwei } from 'viem';\r\n\r\n//base de datos\r\nimport { findAllCriptomonedas } from \"@/stores/criptomonedaStore\";\r\nimport { getExchanges } from \"@/stores/exchangeStore\";\r\nimport { getAllBilleteras } from \"@/stores/billeteraStore\";\r\nimport dynamic from 'next/dynamic'\r\n\r\n// This dynamic import will ensure that this component only renders on the client side\r\nconst SelectorWalletsExchanges = dynamic(() => import('@/components/selectorWalletsExchanges'), {\r\n  ssr: false\r\n})\r\n\r\n\r\nexport default function PasarelaPagos() {\r\n\r\n    const [cryptos, setCryptos] = useState<Crypto[]>([]);\r\n\r\n    useEffect(() => {\r\n        const fetchCryptos = async () => {\r\n            const cryptosFromAPI = await findAllCriptomonedas();\r\n            setCryptos(cryptosFromAPI);\r\n        };\r\n\r\n        fetchCryptos();\r\n    }, []);\r\n\r\n    const [exchanges, setExchanges] = useState<Exchange[]>([]);\r\n\r\n    useEffect(() => {\r\n        const fetchExchanges = async () => {\r\n            const exchangesFromAPI = await getExchanges();\r\n            setExchanges(exchangesFromAPI);\r\n        };\r\n\r\n        fetchExchanges();\r\n    }, []);\r\n\r\n    const [wallets, setWallets] = useState<Wallet[]>([]);\r\n\r\n    useEffect(() => {\r\n        const fetchWallets = async () => {\r\n            const walletsFromAPI = await getAllBilleteras();\r\n            setWallets(walletsFromAPI);\r\n        };\r\n\r\n        fetchWallets();\r\n    }, []);\r\n\r\n\r\n    const { connector, isConnected, address: addressMod } = useAccount()\r\n    const { connect, connectors, error: errorConexion, isLoading, pendingConnector } = useConnect()\r\n    const { disconnect } = useDisconnect()\r\n\r\n    const walletsAvailable = connectors.filter((x) => x.ready);\r\n\r\n    const [selectedWallet, setSelectedWallet] = useState<Wallet | null>(null);\r\n    const [selectedExchange, setSelectedExchange] = useState<Exchange | null>(null);\r\n    const [isCancelled, setIsCancelled] = useState(false);\r\n    const [connectionError, setConnectionError] = useState<boolean>(false);\r\n    const [walletSelectionAttempted, setWalletSelectionAttempted] = useState(false);\r\n\r\n    //const [selectedCrypto, setSelectedCrypto] = useState<Crypto | null>(null);\r\n    const [selectedCrypto, setSelectedCrypto] = useState<Crypto | null>(null);\r\n    const [cryptoNetworks, setCryptoNetworks] = useState<Network[]>([]);\r\n\r\n    const [selectedNetwork, setSelectedNetwork] = useState('');\r\n    const { chain, chains } = useNetwork()\r\n    const { /*chains, error,*/ isLoading: loadingNetowrk, pendingChainId, switchNetwork } = useSwitchNetwork()\r\n    const { data, isError } = useBalance({\r\n        address: addressMod,\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (selectedCrypto) {\r\n            setCryptoNetworks(selectedCrypto.networks);\r\n        }\r\n    }, [selectedCrypto]);\r\n\r\n    const [currentStep, setCurrentStep] = useState(1);\r\n    const [stepChanged, setStepChanged] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (isLoading) {\r\n            setCurrentStep(2);\r\n        } else if (isConnected && !stepChanged) {\r\n            setCurrentStep(3);\r\n            setWalletSelectionAttempted(false);\r\n        } else if (walletSelectionAttempted && (isCancelled || (errorConexion && (errorConexion as any).cause?.code == 4001))) {\r\n            setCurrentStep(4);\r\n            setWalletSelectionAttempted(false);\r\n        } else if (connectionError && !(errorConexion && (errorConexion as any).cause?.code == 4001)) {\r\n            setCurrentStep(1);\r\n        } else if (selectedCrypto) {\r\n            setCurrentStep(6);\r\n        } else {\r\n            setCurrentStep(1);\r\n        }\r\n    }, [isLoading, isConnected, isCancelled, errorConexion, connectionError, stepChanged]);\r\n\r\n    useEffect(() => {\r\n        let timer: any;\r\n        if (isConnected && !stepChanged) {\r\n            timer = setTimeout(() => {\r\n                setStepChanged(true);\r\n            }, 2000);\r\n        }\r\n        return () => clearTimeout(timer);\r\n    }, [isConnected, stepChanged]);\r\n\r\n    useEffect(() => {\r\n        if (stepChanged) {\r\n            setCurrentStep(5);\r\n        }\r\n    }, [stepChanged]);\r\n\r\n    useEffect(() => {\r\n        setConnectionError(!!errorConexion && (errorConexion as any).cause?.code !== 4001);\r\n    }, [errorConexion]);\r\n\r\n    //console.log(connectors);\r\n\r\n    function walletSelect(wallet: Wallet | Exchange) {\r\n\r\n        if ((wallet as any).nameExchange) {\r\n            console.log(\"Seleccionamos exchanges: \", wallet);\r\n\r\n            setSelectedExchange(wallet as Exchange);\r\n            setCurrentStep(5);\r\n        } else {\r\n            const walletConnector = connectors.find(c => c.id === wallet.id);\r\n            if (walletConnector) {\r\n                connect({ connector: walletConnector });\r\n                setSelectedWallet(wallet);\r\n                setWalletSelectionAttempted(true);\r\n            } else {\r\n                //console.error(\"Connector not found for selected wallet\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function getSelectorWalletExchangesProp(): IselectorWalletsExchangesProps {\r\n\r\n        return {\r\n            wallets: walletsAvailable as unknown as Wallet[],\r\n            exchanges: exchanges as unknown as Exchange[],\r\n            onClick: walletSelect,\r\n            error: connectionError,\r\n            billeteras: wallets\r\n        }\r\n    }\r\n\r\n    function getPedingConnectionProp(): IPedingConnectionProps {\r\n\r\n        return {\r\n            onClick: () => walletSelect(selectedWallet as unknown as Wallet),\r\n            currentStep: currentStep,\r\n            connectedObject: selectedWallet as unknown as Wallet,\r\n            inicioStep: () => returnStep(),\r\n            billeteras: wallets\r\n        }\r\n    }\r\n\r\n    function checkCurrentStep() {\r\n        switch (currentStep) {\r\n            case 1: return <SelectorWalletsExchanges {...getSelectorWalletExchangesProp()} />\r\n            case 2:\r\n            case 3:\r\n            case 4:\r\n                return <PendingConnection {...getPedingConnectionProp()} />\r\n        }\r\n    }\r\n\r\n    function returnStep() {\r\n        setCurrentStep(1);\r\n    }\r\n\r\n    const handleDisconnect = () => {\r\n        disconnect();\r\n        setStepChanged(false);\r\n        setCurrentStep(1);\r\n        setSelectedCrypto(null);\r\n    }\r\n\r\n    //console.log(currentStep);\r\n\r\n    function formatAddress(addressMod: string | any[]) {\r\n        const start = addressMod.slice(0, 4); // Obtenemos los primeros 4 caracteres\r\n        const end = addressMod.slice(-4); // Obtenemos los últimos 4 caracteres\r\n        return start + '...' + end; // Concatenamos todo\r\n    }\r\n\r\n    /* --- CRIPTOMONEDAS --- */\r\n    function cryptoSelect(crypto: Crypto) {\r\n        //console.log(\"Seleccionamos crypto\");\r\n        setSelectedCrypto(crypto);\r\n        setCurrentStep(6);\r\n    }\r\n\r\n    function getSelectorCryptoProp(): ISelectorCryptoProps {\r\n\r\n        return {\r\n            cryptos: cryptos,\r\n            onClick: cryptoSelect,\r\n            walletExchange: selectedWallet ? selectedWallet as Wallet : selectedExchange as Exchange,\r\n        }\r\n    }\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n\r\n    /* --- Informacion de contacto --- */\r\n    function getInvoiceProp(): IInvoiceProps {\r\n\r\n        const onClick = (email: string, wantPromotions: boolean) => {\r\n            //console.log(\"Email:\", email);\r\n            setEmail(email);\r\n            //console.log(\"Promociones:\", wantPromotions);\r\n            // Aquí puedes hacer lo que necesites con el email y wantPromotions\r\n        }\r\n\r\n        const enviarStep = () => {\r\n            //console.log(\"Enviando paso...\");\r\n            setCurrentStep(7);\r\n        }\r\n\r\n        return {\r\n            onClick: onClick,\r\n            enviarStep: enviarStep,\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (chain) {\r\n            setSelectedNetwork(chain.id.toString());\r\n        }\r\n    }, [chain]);\r\n\r\n    const handleNetworkChange = (value: string) => {\r\n        const selectedValue = value;\r\n        setSelectedNetwork(selectedValue);\r\n        if (switchNetwork) {\r\n            switchNetwork(parseInt(selectedValue, 10));\r\n        }\r\n    };\r\n\r\n    /* --- Datos de pago --- */\r\n    function getPaymentDataProp(): IPaymentDataProps {\r\n        return {\r\n            cryptos: cryptos,\r\n            walletExchange: selectedWallet as Wallet | Exchange,\r\n            selectedCrypto: selectedCrypto,\r\n            selectedNetwork: selectedNetwork,\r\n            handleNetworkChange: handleNetworkChange,\r\n            chains: chains, // Pasa la prop chains al componente PaymentData\r\n            isLoading: isLoading, // Pasa la prop isLoading al componente PaymentData\r\n            pendingChainId: pendingChainId, // Pasa la prop pendingChainId al componente PaymentData\r\n            cryptoNetworks: cryptoNetworks, // Pasa la prop cryptoNetworks al componente PaymentData\r\n            switchNetwork: switchNetwork, // Pasa la prop switchNetwork al componente PaymentData\r\n            data: data, // Agrega la propiedad \"data\" a la instancia de IPaymentDataProps\r\n            isError: isError, // Pasa el indicador de error al componente PaymentData\r\n            balances: finalBalance,\r\n            isloadingnetwork: loadingNetowrk,\r\n            onClick: pay,\r\n            isSuccessCoin: isSuccessCoin,\r\n            isSuccessToken: isSuccessToken,\r\n            dataHashCoin: dataHashCoin,\r\n            dataHashToken: dataHashToken,\r\n            email: email,\r\n            address: addressMod,\r\n        };\r\n    }\r\n\r\n\r\n    const [contractAddress, setContractAddress] = useState<string | null>(null);\r\n    const [abiContract, setAbiContract] = useState<any | null>(null);\r\n    const [contractPay, setContractPay] = useState<string | null>(null);\r\n    const [priceFortmat, setPriceFormat] = useState<any | null>(null);\r\n    const [executeTransation, setExecuteTransation] = useState(false);\r\n\r\n    function transformNumber(num: number) {\r\n        num = Number(num); // Asegurarse de que num es un número\r\n        if (isNaN(num)) {\r\n            throw new Error(\"Input must be a number\");\r\n        }\r\n\r\n        let str = num.toFixed(6); // Asegúrate de que siempre tengas 6 decimales\r\n        let parts = str.split('.');\r\n\r\n        // Quita el punto decimal\r\n        return parts[0] + parts[1];\r\n    }\r\n\r\n\r\n\r\n    function getDataContract(price: number) {\r\n\r\n        //Direcición de contrato del token en la red elegida\r\n        const networkActual = selectedNetwork;\r\n        console.log(networkActual);\r\n\r\n        const network = selectedCrypto?.networks.find((net: { id: number; }) => net.id === Number(networkActual));\r\n        const contract = network?.contract_pay;\r\n        console.log(`Dirección del contrato en ${network?.name}: ${contract} de ${selectedCrypto?.name}`);\r\n\r\n        setContractAddress(network?.contract_address as string);\r\n        setAbiContract(network?.contract_ABI);\r\n        setContractPay(network?.contract_pay as string);\r\n\r\n        const priceFinal: string = price.toString();\r\n        //const priceFinalFortmat = parseWei(price, wei)\r\n        setPriceFormat(transformNumber(price));\r\n\r\n        console.log(priceFortmat);\r\n\r\n\r\n        console.log('Contract address: ', contractAddress);\r\n        setExecuteTransation(true);\r\n\r\n    }\r\n\r\n    const { write: sendTransaction2, data: dataHashToken, isSuccess: isSuccessToken } = useContractWrite({\r\n        address: contractAddress as any, // Deberías reemplazar esto con la dirección del contrato del token\r\n        abi: abiContract, // Deberías reemplazar esto con el ABI del token ERC20\r\n        functionName: 'transfer',\r\n        args: [contractPay, priceFortmat], // Deberías reemplazar esto con la dirección del destinatario y la cantidad de tokens a enviar\r\n    })\r\n\r\n    const { sendTransaction, isLoading: cargando, error: errores, data: dataHashCoin, isSuccess: isSuccessCoin } = useSendTransaction()\r\n    function payer(contract: string | undefined, network: Network | undefined, price: number) {\r\n\r\n        try {\r\n            sendTransaction({\r\n                to: contract as string, // la dirección del contrato Munbia Polygon\r\n                value: parseEther(price as any), // la cantidad de ETH a enviar, en wei. 0.01 ETH en este ejemplo.\r\n            })\r\n        } catch (err) {\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n    function getContractAddress() {\r\n\r\n        // Encuentra la red seleccionada dentro de las redes de la criptomoneda seleccionada\r\n        const network = selectedCrypto?.networks.find((net: { id: number; }) => net.id === Number(selectedNetwork));\r\n\r\n        // Comprueba si hay un contract_address para la red seleccionada y devuelve el resultado\r\n        return network ? !!network.contract_address : false;\r\n    }\r\n\r\n\r\n\r\n    function pay(price: number) {\r\n        console.log('aqui hago el pago');\r\n        const networkActual = selectedNetwork;\r\n        const network = selectedCrypto?.networks.find((net: { id: number; }) => net.id === Number(networkActual));\r\n        const contract = network?.contract_pay;\r\n\r\n        console.log(price);\r\n\r\n        const tipoContractAddress = getContractAddress();\r\n\r\n        try {\r\n            if (!tipoContractAddress) {\r\n                console.log('Es Coin');\r\n                payer(contract, network, price);\r\n            } else {\r\n                console.log('Es token ');\r\n                getDataContract(price);\r\n                //sendTransaction2();\r\n            }\r\n        } catch (err) {\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (executeTransation) {\r\n            sendTransaction2();\r\n            setExecuteTransation(false);\r\n        }\r\n    }, [executeTransation]);\r\n\r\n    // Función para buscar una red por su id dentro de una criptomoneda\r\n    function getNetworkById(crypto: Crypto, id: number): Network | undefined {\r\n        const bb = crypto?.networks.find(network => network.id === id)\r\n        //console.log('segundo: ', bb);\r\n        return crypto?.networks.find(network => network.id === id);\r\n    }\r\n\r\n    let finalBalance: number; // declara finalBalance como un número fuera del bloque if\r\n\r\n    const actualNetworkAdress = getNetworkById(selectedCrypto as any, chain?.id as any);\r\n    //console.log(selectedCrypto);\r\n    //console.log('datos: ', actualNetworkAdress?.contract_ABI, actualNetworkAdress?.contract_ABI);\r\n\r\n    const { data: balances, error } = useContractRead({\r\n        address: actualNetworkAdress?.contract_address as any,\r\n        abi: actualNetworkAdress?.contract_ABI, // Deberás definir la ABI de ERC20\r\n        functionName: 'balanceOf',\r\n        args: [addressMod],\r\n    });\r\n\r\n    //console.log('SC: ', balances);\r\n\r\n    if (balances !== undefined) {\r\n        const decimals = actualNetworkAdress?.decimal_place;\r\n        const balance = BigInt(balances as unknown as bigint);\r\n        finalBalance = Number(balance) / 10 ** (decimals as any);\r\n        //console.log('informacion cripto ', data, 'cantidad:', finalBalance);\r\n        //console.log(`El balance de la cuenta es: ${finalBalance}`);\r\n        // Puedes retornar el balance aquí si necesitas\r\n    }\r\n\r\n    const goBack = () => {\r\n\r\n        console.log('Quiero volver atrás');\r\n        console.log(currentStep);\r\n\r\n\r\n        if (currentStep == 4) {\r\n            setCurrentStep(1);\r\n        }\r\n        if (currentStep == 5) {\r\n            disconnect();\r\n            setStepChanged(false);\r\n            setSelectedExchange(null);\r\n            setSelectedWallet(null);\r\n            setCurrentStep(1);\r\n            setWalletSelectionAttempted(false);\r\n        }\r\n        if (currentStep == 6) {\r\n            setCurrentStep(5);\r\n            setSelectedCrypto(null);\r\n        }\r\n        if (currentStep == 7) {\r\n            setCurrentStep(6);\r\n        }\r\n        //console.log(currentStep);\r\n        //console.log(selectedExchange);\r\n        //console.log(selectedWallet);\r\n        //console.log(selectedCrypto);\r\n    }\r\n\r\n\r\n    function logoImg(selectedExchange: any) {\r\n\r\n\r\n        for (let i = 0; i < exchanges.length; i++) {\r\n            if (exchanges[i].id === selectedExchange.id) {\r\n                return exchanges[i].logoImg;\r\n            }\r\n        }\r\n        // Devolverá null si no se encuentra una coincidencia\r\n        return '';\r\n    }\r\n\r\n    function logoImgBilletera(selectedWallet: any) {\r\n\r\n\r\n        for (let i = 0; i < wallets.length; i++) {\r\n            if (wallets[i].id === selectedWallet.id) {\r\n                return wallets[i].logoImg;\r\n            }\r\n        }\r\n        // Devolverá null si no se encuentra una coincidencia\r\n        return '';\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"interface-wrapper\">\r\n                <div id=\"interface-container\" className=\"interface-container\">\r\n\r\n                    <div className=\"left-section\">\r\n                        {currentStep > 1 &&\r\n                            <span className=\"material-symbols-outlined\" onClick={goBack}>\r\n                                arrow_back\r\n                            </span>\r\n                        }\r\n                        {currentStep == 7 &&\r\n                            <>\r\n                                <h2 className=\"interface-title\">Consejo</h2>\r\n                                <p>Pulse realizar el pago en otra red distinta a la seleccionada, revise el precio por transacción para evitar pagar más de la cuenta.</p>\r\n                            </>\r\n                        }\r\n                        {currentStep == 6 &&\r\n                            <>\r\n                                <h2 className=\"interface-title\">Envíe sus datos</h2>\r\n                                <p>Necesitamos la siguiente información para poder ponernos en contacto en caso de que haya algún problema.</p>\r\n                            </>\r\n                        }\r\n                        {currentStep == 5 &&\r\n                            <>\r\n                                <h2 className=\"interface-title\">Seleccione una criptomoneda</h2>\r\n                                <p>Pulse sobre la criptomoneda con la que desee efectuar el pago, posteriormente puede elegir la red con la que realizarlo.</p>\r\n\r\n                            </>\r\n                        }\r\n                        {currentStep < 5 &&\r\n                            <>\r\n                                <h2 className=\"interface-title\">Conecta tu billetera</h2>\r\n                                <p>Pulse sobre la billetera para conectarse y realizar el pago.</p>\r\n                                <Stepper currentStep={currentStep} /> {/* añadir que cuando sea menor a 4 se pinte*/}\r\n                            </>\r\n                        }\r\n                        {isConnected && currentStep > 4 && (\r\n                            <>\r\n                                {console.log(data)}\r\n                                <div className=\"exchange-info-left\">\r\n                                    <div className=\"exchange-logo-container\">\r\n                                        <img className=\"imagen-logo\" src={\"/pasarela/\" + logoImgBilletera(selectedWallet)} alt=\"\" />\r\n                                    </div>\r\n                                    <div className=\"info-wallet-left\">\r\n                                        <span className=\"address-wallet\">{formatAddress(addressMod as any)}</span>\r\n                                        <span className=\"balance-wallet\">{parseFloat(data?.formatted as any).toFixed(4)} {data?.symbol}</span>\r\n                                    </div>\r\n\r\n                                    <span className=\"material-symbols-outlined\" onClick={handleDisconnect}>\r\n                                        logout\r\n                                    </span>\r\n\r\n                                </div>\r\n\r\n                            </>\r\n                        )}\r\n                        {selectedExchange && (\r\n\r\n                            <div className=\"exchange-info-left\">\r\n                                <div className=\"exchange-logo-container\">\r\n                                    <img className=\"imagen-logo\" src={\"/pasarela/\" + logoImg(selectedExchange)} alt=\"\" />\r\n                                </div>\r\n                                <span className=\"exchange-name\">{selectedExchange?.nameExchange}</span>\r\n                            </div>\r\n\r\n                        )}\r\n\r\n                    </div>\r\n                    <div className=\"right-section\">\r\n                        {checkCurrentStep()}\r\n                        {currentStep == 5 && (\r\n                            <SelectorCrypto {...getSelectorCryptoProp()} />\r\n                        )}\r\n                        {currentStep == 6 && (\r\n                            <Invoice {...getInvoiceProp()} />\r\n                        )}\r\n                        {currentStep == 7 && (\r\n                            <PaymentData {...getPaymentDataProp()} />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n",{"ruleId":"97","severity":1,"message":"98","line":9,"column":4,"nodeType":"99","endLine":9,"endColumn":134},{"ruleId":"100","severity":1,"message":"101","line":746,"column":33,"nodeType":"99","endLine":746,"endColumn":111},{"ruleId":"100","severity":1,"message":"101","line":761,"column":33,"nodeType":"99","endLine":761,"endColumn":110},{"ruleId":"100","severity":1,"message":"101","line":904,"column":21,"nodeType":"99","endLine":904,"endColumn":64},{"ruleId":"102","severity":1,"message":"103","line":904,"column":21,"nodeType":"99","endLine":904,"endColumn":64},{"ruleId":"100","severity":1,"message":"101","line":1272,"column":17,"nodeType":"99","endLine":1272,"endColumn":97},{"ruleId":"102","severity":1,"message":"103","line":1272,"column":17,"nodeType":"99","endLine":1272,"endColumn":97},{"ruleId":"100","severity":1,"message":"101","line":1463,"column":33,"nodeType":"99","endLine":1463,"endColumn":143},{"ruleId":"100","severity":1,"message":"101","line":1528,"column":33,"nodeType":"99","endLine":1528,"endColumn":149},{"ruleId":"100","severity":1,"message":"101","line":52,"column":29,"nodeType":"99","endLine":52,"endColumn":129},{"ruleId":"100","severity":1,"message":"101","line":76,"column":29,"nodeType":"99","endLine":76,"endColumn":129},{"ruleId":"100","severity":1,"message":"101","line":99,"column":29,"nodeType":"99","endLine":99,"endColumn":129},{"ruleId":"100","severity":1,"message":"101","line":102,"column":37,"nodeType":"99","endLine":102,"endColumn":158},{"ruleId":"100","severity":1,"message":"101","line":84,"column":37,"nodeType":"99","endLine":84,"endColumn":117},{"ruleId":"100","severity":1,"message":"101","line":101,"column":37,"nodeType":"99","endLine":101,"endColumn":115},{"ruleId":"104","severity":1,"message":"105","line":112,"column":8,"nodeType":"106","endLine":112,"endColumn":90,"suggestions":"107"},{"ruleId":"104","severity":1,"message":"108","line":394,"column":8,"nodeType":"106","endLine":394,"endColumn":27,"suggestions":"109"},{"ruleId":"100","severity":1,"message":"101","line":524,"column":41,"nodeType":"99","endLine":524,"endColumn":133},{"ruleId":"100","severity":1,"message":"101","line":543,"column":37,"nodeType":"99","endLine":543,"endColumn":122},"@next/next/google-font-display","A font-display parameter is missing (adding `&display=optional` is recommended). See: https://nextjs.org/docs/messages/google-font-display","JSXOpeningElement","@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'selectedCrypto' and 'walletSelectionAttempted'. Either include them or remove the dependency array.","ArrayExpression",["110"],"React Hook useEffect has a missing dependency: 'sendTransaction2'. Either include it or remove the dependency array.",["111"],{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},"Update the dependencies array to be: [isLoading, isConnected, isCancelled, errorConexion, connectionError, stepChanged, walletSelectionAttempted, selectedCrypto]",{"range":"116","text":"117"},"Update the dependencies array to be: [executeTransation, sendTransaction2]",{"range":"118","text":"119"},[4536,4618],"[isLoading, isConnected, isCancelled, errorConexion, connectionError, stepChanged, walletSelectionAttempted, selectedCrypto]",[14516,14535],"[executeTransation, sendTransaction2]"]