[{"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\pages\\api\\hello.ts":"1","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\pages\\index.tsx":"2","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\pages\\_app.tsx":"3","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\pages\\_document.tsx":"4","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\cryptoData.ts":"5","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\exchangesData.ts":"6","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\invoice.tsx":"7","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\paymentData.tsx":"8","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\paymentSteps.tsx":"9","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\pedingConnection.tsx":"10","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\profile.tsx":"11","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\selectorCrypto.tsx":"12","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\selectorWalletsExchanges.tsx":"13","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\stepper.tsx":"14","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\index.tsx":"15"},{"size":320,"mtime":1689003114007,"results":"16","hashOfConfig":"17"},{"size":335,"mtime":1689068133030,"results":"18","hashOfConfig":"17"},{"size":1715,"mtime":1689004519647,"results":"19","hashOfConfig":"17"},{"size":586,"mtime":1689068183298,"results":"20","hashOfConfig":"17"},{"size":71144,"mtime":1689003113902,"results":"21","hashOfConfig":"17"},{"size":1424,"mtime":1689067381977,"results":"22","hashOfConfig":"17"},{"size":4999,"mtime":1689003113902,"results":"23","hashOfConfig":"17"},{"size":65631,"mtime":1689005137803,"results":"24","hashOfConfig":"17"},{"size":2582,"mtime":1689004500040,"results":"25","hashOfConfig":"17"},{"size":5191,"mtime":1689003113904,"results":"26","hashOfConfig":"17"},{"size":510,"mtime":1689003113904,"results":"27","hashOfConfig":"17"},{"size":5239,"mtime":1689003113904,"results":"28","hashOfConfig":"17"},{"size":4718,"mtime":1689068550436,"results":"29","hashOfConfig":"17"},{"size":1172,"mtime":1689003113905,"results":"30","hashOfConfig":"17"},{"size":21844,"mtime":1689068630673,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ic6blf",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\pages\\api\\hello.ts",[],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\pages\\index.tsx",[],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\pages\\_app.tsx",[],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\pages\\_document.tsx",["80","81"],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\cryptoData.ts",[],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\exchangesData.ts",[],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\invoice.tsx",[],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\paymentData.tsx",["82","83","84","85","86","87","88","89"],[],"import { Exchange, Network, Wallet, Crypto, BilleteraTemp, Transaccion } from '@/definitions/global';\r\nimport * as React from 'react';\r\nimport { Chain } from 'wagmi';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\nimport { ReactNode } from 'react';\r\nimport fetchAPI from \"@/stores/basicStore\";\r\nimport { useState, useEffect } from 'react';\r\nimport WalletLibrary from 'ethereumjs-wallet';\r\nimport { useContractWrite, useSendTransaction } from 'wagmi'\r\nimport { Usuario } from \"@/definitions/global\";\r\nimport { findOneUsuario, updateUsuario } from \"@/stores/usuarioStore\";\r\nimport { createBilleteraTemp } from \"@/stores/billeteraTemp\";\r\nimport { createTransaccion, updateTransaccion } from '@/stores/transaccionStore';\r\n\r\nexport interface IPaymentDataProps {\r\n    walletExchange: Wallet | Exchange;\r\n    cryptos: Crypto[];\r\n    selectedCrypto: Crypto | null;\r\n    selectedNetwork: string; // Nueva propiedad para recibir el valor de la red seleccionada\r\n    handleNetworkChange: (value: string) => void; // Nueva propiedad para recibir la función de cambio de red\r\n    switchNetwork?: (chainId?: number) => void; // Nueva propiedad para recibir la función de cambio de red de la biblioteca wagmi\r\n    chains: Chain[]; // Nueva propiedad para recibir las cadenas de la red\r\n    isLoading: boolean; // Nueva propiedad para indicar si se está cargando\r\n    pendingChainId: number | undefined; // Nueva propiedad para el ID de la cadena pendiente\r\n    cryptoNetworks: Network[]; // Nueva propiedad para las redes de la criptomoneda seleccionada\r\n    data: any; // Nueva propiedad para los datos de balance\r\n    isError: boolean; // Nueva propiedad para indicar si hay un error\r\n    balances: number | undefined; // Nueva propiedad para el balance del contrato\r\n    isloadingnetwork: boolean;\r\n    onClick: (finalPrice: any) => void;\r\n    isSuccessCoin: boolean,\r\n    isSuccessToken: boolean,\r\n    dataHashCoin: any,\r\n    dataHashToken: any,\r\n    email: string,\r\n    address: any,\r\n}\r\nexport interface IPaymentDataState {\r\n    isInfoVisible: boolean;\r\n    selectedOption: {\r\n        displayLabel: ReactNode; value: number, label: JSX.Element\r\n    } | null;\r\n    gasPrices: {};\r\n    menuIsOpen: boolean;\r\n    qrCode: string | null;\r\n    menuInfoOpen: boolean;\r\n    selectedCryptoPrice: number,\r\n    totalPrice: number,// Precio que paga en USD\r\n    finalPrice: string, // Precio final que tiene que pagar\r\n    menuMetamaskOpen: boolean;\r\n    expiredInvoice: boolean;\r\n    invalidNetwork: boolean;\r\n    transactions: {};\r\n\r\n    // STEPPER\r\n    step: number;\r\n    modalPartialPayment: boolean;\r\n    modalPartialPaymentShown: boolean,\r\n    modalCompletedPayment: boolean;\r\n    modalCompletedPaymentShown: boolean,\r\n\r\n    // NUEVOS MENSAJES MODALES\r\n    addressPaymentOpen: boolean;\r\n    infoPaymentOpen: boolean;\r\n    paymentCompletedOpen: boolean;\r\n    partialPaymentOpen: boolean;\r\n\r\n    // contadot de tiempo\r\n    timeLeft: number; // Time in seconds\r\n    totalTime: number;\r\n    showPartialPaymentModal: boolean;\r\n    timer: NodeJS.Timeout | null;\r\n\r\n    // billeteras\r\n    walletAddress: string;\r\n    isWalletGenerated: boolean;\r\n    contractAddress: string;\r\n\r\n    // Copiar\r\n    copiedAddress: boolean;\r\n    copiedAmount: boolean;\r\n\r\n    // boton pagar\r\n    isPayButtonEnabled: boolean;\r\n\r\n    //transaccion id\r\n    transaccionId: string | null;\r\n\r\n    //hashes de pago\r\n    hashes: string[];\r\n}\r\n\r\n\r\n\r\nexport default class PaymentData extends React.Component<IPaymentDataProps, IPaymentDataState> {\r\n    constructor(props: IPaymentDataProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            gasPrices: {},\r\n            selectedOption: null,\r\n            isInfoVisible: false,\r\n            menuIsOpen: false,\r\n            //qrCode: null\r\n            menuInfoOpen: false,\r\n            selectedCryptoPrice: 0,\r\n            totalPrice: 20, // Precio inicial de $20\r\n            finalPrice: \"\", // Precio final que tiene que pagar\r\n            menuMetamaskOpen: false,\r\n            expiredInvoice: false,\r\n            invalidNetwork: false,\r\n            transactions: {},\r\n            qrCode: \"\",\r\n\r\n            // STEPPER\r\n            step: 1,\r\n            modalPartialPayment: false,\r\n            modalPartialPaymentShown: false,\r\n            modalCompletedPayment: false,\r\n            modalCompletedPaymentShown: false,\r\n\r\n            // NUEVOS MENSAJES MODALES\r\n            addressPaymentOpen: false,\r\n            infoPaymentOpen: false,\r\n            paymentCompletedOpen: false,\r\n            partialPaymentOpen: false,\r\n\r\n            //contador de tiempo\r\n            timeLeft: 60, // Tiempo en segundos\r\n            totalTime: 60,\r\n            showPartialPaymentModal: false,\r\n            timer: null,\r\n\r\n            // Billetera\r\n            walletAddress: '',\r\n            isWalletGenerated: false,\r\n            contractAddress: '',\r\n\r\n            // copiar\r\n            copiedAddress: false,\r\n            copiedAmount: false,\r\n\r\n            //boton pagar\r\n            isPayButtonEnabled: false,\r\n\r\n            //id transaccion\r\n            transaccionId: null,\r\n\r\n            // hashes de pago\r\n            hashes: [] as string[],\r\n        }\r\n    }\r\n\r\n    wallet = WalletLibrary.generate();\r\n\r\n    toggleInfoVisibility = () => {\r\n        this.setState((prevState) => ({\r\n            isInfoVisible: !prevState.isInfoVisible,\r\n        }));\r\n    };\r\n\r\n\r\n    // Método para obtener el precio de Ethereum en dólares desde la API de CoinGecko (Para el GAS de las redes que no me da OWLRACLE)\r\n    getEthPriceInDollars = async () => {\r\n        try {\r\n            const res = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd');\r\n            //console.log('****Ethereum price:', res.data.ethereum.usd);\r\n            return res.data.ethereum.usd;\r\n        } catch (error) {\r\n            //console.error('Error fetching Ethereum price:', error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Creo un nuevo método para obtener el precio de la criptomoneda seleccionada\r\n    getCryptoPriceInDollars = async (selectedCrypto: any) => {\r\n        try {\r\n            const res = await axios.get(`https://api.coingecko.com/api/v3/simple/price?ids=${selectedCrypto?.id}&vs_currencies=usd`);\r\n            //console.log('////// precio criptomoneda elegida: ', res.data[selectedCrypto?.id].usd);\r\n            return res.data[selectedCrypto?.id].usd;\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Método para obtener precios de gas desde la API\r\n    getGasPrices = async () => {\r\n        const { chains } = this.props;\r\n\r\n        const gasPrices: Record<number, string> = {};\r\n        const ethPriceInDollars = await this.getEthPriceInDollars(); // Obtiene el precio de Ethereum en dólares\r\n\r\n        for (const chain of chains) {\r\n            try {\r\n                let res;\r\n                if (chain.id === 80001) {\r\n                    // Si el ID de la cadena es 80001, haz una petición a la otra API\r\n                    res = await axios.get(`https://gasstation.polygon.technology/v2`);\r\n                    // Accede al precio 'standard' y conviértelo a dólares\r\n                    let gasPriceInGWei = res.data.standard.maxFee;\r\n                    let gasPriceInDollars = gasPriceInGWei * ethPriceInDollars / 1e9;\r\n                    //console.log('****MUMBAI price gas:', gasPriceInDollars);\r\n                    gasPrices[chain.id] = gasPriceInDollars.toFixed(2);\r\n                } else {\r\n                    // Si el ID de la cadena no es 80001, haz una petición a la API original\r\n                    res = await axios.get(`https://api.owlracle.info/v4/${chain.id}/gas?apikey=${'9e0db8f010f746ffa3ac7943938ddc6e'}`);\r\n                    gasPrices[chain.id] = res.data.speeds[3].estimatedFee.toFixed(2);\r\n                }\r\n            } catch (error) {\r\n                //console.error('Error fetching gas price for chain', chain.id, error);\r\n                gasPrices[chain.id] = \"0.00\"; // Establece el precio del gas a \"0.00\" si la petición falla\r\n            }\r\n        }\r\n        //console.log('Estos son los gasPrices: ', gasPrices);\r\n        return gasPrices;\r\n    }\r\n\r\n    getPrices = async () => {\r\n        const { selectedCrypto } = this.props;\r\n        const cryptoPriceInDollars = await this.getCryptoPriceInDollars(selectedCrypto); // Obtiene el precio en dólares\r\n        return cryptoPriceInDollars;\r\n    }\r\n\r\n    // TODO poner el waddres correspondiente\r\n    fetchTransactions = async () => {\r\n\r\n        const waddress = '0xb92eC3280324526dCc2366E3273fAD65fE69245d'\r\n        // cambiar por this.state.walletAddress\r\n        if (this.state.contractAddress) {\r\n            try {\r\n                const res = await fetchAPI(`https://api-goerli.etherscan.io/api?module=account&action=tokentx&address=${waddress}&startblock=0&endblock=99999999&sort=desc&apikey=7JDF4NDNJBJXTFQGB4XN9HW3ZCNBKCPWY8`);\r\n                //const res = await fetchAPI(`https://api-goerli.etherscan.io/api?module=account&action=txlist&address=0xb92eC3280324526dCc2366E3273fAD65fE69245d&startblock=0&endblock=99999999&page=1&offset=10&sort=desc&apikey=7JDF4NDNJBJXTFQGB4XN9HW3ZCNBKCPWY8`);\r\n                //this.setState({ transactions: res.data.result });\r\n                return res.result;\r\n            } catch (error) {\r\n                console.error('Error fetching transactions:', error);\r\n            }\r\n\r\n        } else {\r\n            try {\r\n                //const res = await fetchAPI(`https://api-goerli.etherscan.io/api?module=account&action=tokentx&address=${waddress}&startblock=0&endblock=99999999&sort=desc&apikey=7JDF4NDNJBJXTFQGB4XN9HW3ZCNBKCPWY8`);\r\n                const res = await fetchAPI(`https://api-goerli.etherscan.io/api?module=account&action=txlist&address=${waddress}&startblock=0&endblock=99999999&page=1&offset=10&sort=desc&apikey=7JDF4NDNJBJXTFQGB4XN9HW3ZCNBKCPWY8`);\r\n                //this.setState({ transactions: res.data.result });\r\n                return res.result;\r\n            } catch (error) {\r\n                console.error('Error fetching transactions:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    timer: NodeJS.Timeout | null = null;\r\n    startTimer = () => {\r\n        this.timer = setInterval(() => {\r\n            if (this.state.timeLeft <= 0) {\r\n                this.clearTimer();\r\n                this.setState({ expiredInvoice: true });\r\n            } else {\r\n                this.setState((prevState) => ({ timeLeft: prevState.timeLeft - 1 }));\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    clearTimer = () => {\r\n        if (this.timer !== null) {\r\n            clearInterval(this.timer);\r\n            this.timer = null;\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.clearTimer();\r\n\r\n        if (this.intervalId !== null) {\r\n            clearInterval(this.intervalId);\r\n        }\r\n    }\r\n\r\n    async generateWallet() {\r\n        // Generar una nueva billetera\r\n        // Obtener la clave privada y la dirección de la billetera\r\n        const privateKey = this.wallet.getPrivateKeyString();\r\n        const address = this.wallet.getAddressString();\r\n\r\n        console.log(`Dirección de la billetera: ${address}`);\r\n        console.log(`Clave privada: ${privateKey}`);\r\n\r\n        // Guardar la dirección en el estado\r\n        if (await this.createBilleteraTemp(privateKey, address)) {\r\n            this.setState({ walletAddress: address });\r\n        }\r\n\r\n    }\r\n\r\n    private async createBilleteraTemp(privateKey: string, address: string) {\r\n        try {\r\n            const billeteraTemp: BilleteraTemp = {\r\n                user_id: this.props.email,\r\n                transaction_id: \"\",\r\n                cryptocurrency_id: this.props.selectedCrypto?.id as any,\r\n                public_key: address,\r\n                private_key_encrypted: privateKey,\r\n                expiration_date: new Date(\"2023-07-01T00:00:00.000Z\"),\r\n            }\r\n            return await createBilleteraTemp(billeteraTemp);\r\n        }\r\n        catch (error) {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    getContractAddressCrypto() {\r\n\r\n        //if(!this.props.selectedNetwork){\r\n        const network = this.props.selectedCrypto?.networks.find(net => net.id === 5);\r\n        const contract = network?.contract_address;\r\n        console.log(`Dirección del contrato en Ethereum Goerli: ${contract}`);\r\n        //}\r\n        if (contract) {\r\n            this.setState({ contractAddress: contract });\r\n        } else {\r\n            console.log('No se encontró la dirección del contrato para la red seleccionada');\r\n        }\r\n    }\r\n\r\n\r\n    // TODO TRANSACCION EXCHANGE\r\n    private async createTransaccion2(email: string) {\r\n        try {\r\n            if (!this.props.selectedCrypto) {\r\n                throw new Error(\"No crypto selected\");\r\n            }\r\n\r\n            console.log('transaccion desde exchange');\r\n\r\n            const transaccion: Transaccion = {\r\n                user_id: this.props.email,\r\n                crypto_id: this.props.selectedCrypto?.id,\r\n                amount_crypto: parseFloat(this.state.finalPrice),\r\n                amount_fiat: this.state.totalPrice,\r\n                status: \"pending\",\r\n                network_id: \"5\",\r\n                temp_wallet_id: this.state.walletAddress,\r\n                invoice: { invoice_id: \"\", sent: false, downloaded: false }\r\n            }\r\n            const createdTransaccion = await createTransaccion(transaccion);\r\n\r\n            if (createdTransaccion._id) {\r\n                this.setState({ transaccionId: createdTransaccion._id });\r\n            } else {\r\n                console.log('No hay ID de la transaccion');\r\n            }\r\n\r\n                return createdTransaccion._id;\r\n\r\n        }\r\n        catch (error) {\r\n            // handle error\r\n        }\r\n    }\r\n\r\n    // TODO TRANSACCION EXCHANGE\r\n    private async updateTransaccion2(email: string, hashes: string[], step: string) {\r\n        try {\r\n\r\n            if (step == \"4\") {\r\n                if (!this.props.selectedCrypto) {\r\n                    // handle the error here, for example, throw an error or return from the function\r\n                    throw new Error(\"No crypto selected\");\r\n                }\r\n\r\n\r\n                console.log('transaccion desde exchange');\r\n\r\n                const transaccion: Partial<Transaccion> = {\r\n                    hash: hashes,\r\n                    user_id: this.props.email,\r\n                    crypto_id: this.props.selectedCrypto?.id,\r\n                    amount_crypto: parseFloat(this.state.finalPrice),\r\n                    amount_fiat: this.state.totalPrice,\r\n                    status: \"confirmed\",\r\n                    network_id: \"5\",\r\n                    temp_wallet_id: this.state.walletAddress,\r\n                    invoice: { invoice_id: \"\", sent: false, downloaded: false }\r\n                }\r\n\r\n                await updateTransaccion(this.state.transaccionId as string, transaccion);\r\n            }\r\n            if (step == \"3\") {\r\n\r\n                const transaccion: Partial<Transaccion> = {\r\n                    hash: hashes,\r\n                    status: \"waiting_for_confirmations\",\r\n                }\r\n\r\n                await updateTransaccion(this.state.transaccionId as string, transaccion);\r\n            }\r\n            if (step == \"2\") {\r\n\r\n                const transaccion: Partial<Transaccion> = {\r\n                    hash: hashes,\r\n                    status: \"underpaid\",\r\n                }\r\n\r\n                await updateTransaccion(this.state.transaccionId as string, transaccion);\r\n            }\r\n\r\n        }\r\n        catch (error) {\r\n\r\n        }\r\n    }\r\n\r\n    private async updateUser2(email: string, newTransactionId: string) {\r\n        try {\r\n            // Obtener el usuario existente\r\n            const currentUser = await findOneUsuario(email);\r\n\r\n            if (currentUser) {\r\n                // Crear una nueva lista de IDs que incluye los existentes y la nueva\r\n                const currentTransactionIds = currentUser.transaction_ids || []; // Utilizar un array vacío si es undefined\r\n                const updatedTransactionIds = [...currentTransactionIds, newTransactionId];\r\n\r\n                const userUpdate: Partial<Usuario> = {\r\n                    wallets: [{ address: \"exchange wallet\", network: \"5\" }],\r\n                    transaction_ids: updatedTransactionIds,\r\n                }\r\n                await updateUsuario(email, userUpdate);\r\n            } else {\r\n                // Manejar el caso cuando el usuario no se encuentra\r\n            }\r\n        }\r\n        catch (error) {\r\n            // Manejar el error\r\n        }\r\n    }\r\n\r\n\r\n    private checkPaymentStatus = async (transactions: any[]) => {\r\n        const totalAmountNeeded = 20.00;\r\n        let totalReceived = 0;\r\n        let totalConfirmed = 0;\r\n        // TODO cambiar para comprobar direccion real\r\n        const desiredToAddress = \"0xb92eC3280324526dCc2366E3273fAD65fE69245d\";\r\n        //const desiredContractAddress = \"0x2e8d98fd126a32362f2bd8aa427e59a1ec63f780\";\r\n        //const desiredToAddress = this.state.walletAddress;\r\n        this.getContractAddressCrypto();\r\n        const desiredContractAddress = this.state.contractAddress;\r\n\r\n        console.log('ENTRO AQUI: ', desiredContractAddress);\r\n\r\n        let filteredTransactions = transactions.filter((tx: { to: string; contractAddress: string; }) =>\r\n            tx.to.toLowerCase() === desiredToAddress.toLowerCase() &&\r\n            tx.contractAddress.toLowerCase() === desiredContractAddress.toLowerCase()\r\n        );\r\n\r\n        if (!desiredContractAddress) {\r\n            filteredTransactions = transactions;\r\n        }\r\n\r\n        console.log('filtradas: ', filteredTransactions);\r\n\r\n        for (let tx of filteredTransactions) {\r\n            const tokenDecimal = tx.tokenDecimal || 18;\r\n            totalReceived += tx.value / Math.pow(10, tokenDecimal);\r\n            if (tx.confirmations >= 2) {\r\n                totalConfirmed += tx.value / Math.pow(10, tokenDecimal);\r\n                console.log('total confirmadas: ', totalConfirmed);\r\n            }\r\n        }\r\n\r\n        const hashes = filteredTransactions.map(tx => tx.hash);\r\n        this.setState({ hashes: hashes });\r\n        console.log('el numero de hashes totales: /*/***//*/*/*/*', hashes);\r\n\r\n        if (!this.state.transaccionId) {\r\n            const newTransactionId  = await this.createTransaccion2(this.props.email);\r\n\r\n            if (newTransactionId) {\r\n                await this.updateUser2(this.props.email, newTransactionId);\r\n            } else {\r\n                console.error('Error al crear la transacción');\r\n            }\r\n        }\r\n\r\n        if (totalConfirmed >= totalAmountNeeded) {\r\n            this.setState({ step: 4 }); // Pago completado\r\n            await this.updateTransaccion2(this.props.email, hashes, \"4\");\r\n            if (this.intervalId) {\r\n                clearInterval(this.intervalId);\r\n            }\r\n            if (!this.state.modalCompletedPaymentShown) {\r\n\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        paymentCompletedOpen: true,\r\n                        modalCompletedPaymentShown: true\r\n                    });\r\n                }, 1000);\r\n            }\r\n        } else if (totalReceived >= totalAmountNeeded) {\r\n            this.setState({ step: 3 }); // Esperando confirmación\r\n            await this.updateTransaccion2(this.props.email, hashes, \"3\");\r\n        } else if (totalReceived > 0) {\r\n            this.setState({ step: 2 }); // Pago parcialmente recibido\r\n            await this.updateTransaccion2(this.props.email, hashes, \"2\");\r\n            if (!this.state.modalPartialPaymentShown) {\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        partialPaymentOpen: true,\r\n                        modalPartialPaymentShown: true\r\n                    });\r\n                }, 1000);\r\n            }\r\n        }\r\n        /*else {\r\n           this.setState({ step: 1 }); // Esperando pago\r\n       }*/\r\n    };\r\n\r\n    private seconds = 0;\r\n    private transactions: any[] = [];\r\n\r\n    private simulateTransactions = () => {\r\n\r\n        // Simulate a transaction every few seconds\r\n        setInterval(() => {\r\n            this.seconds += 1;\r\n\r\n            if (this.seconds === 3) {\r\n                // After 3 seconds, make a transaction of 4\r\n                this.transactions.push(this.createTransaction(4));\r\n            } else if (this.seconds === 7) {\r\n                // After 7 seconds (4 seconds after the first transaction), make a transaction of 10\r\n                this.transactions.push(this.createTransaction(10));\r\n            } else if (this.seconds === 10) {\r\n                // After 10 seconds (3 seconds after the second transaction), make a transaction of 7\r\n                this.transactions.push(this.createTransaction(7));\r\n            }\r\n\r\n            // Call the function that should process the transactions\r\n            this.checkPaymentStatus(this.transactions);\r\n        }, 6000);  // Run every second\r\n    };\r\n\r\n    private createTransaction = (value: number) => {\r\n        const desiredToAddress = \"0xb92eC3280324526dCc2366E3273fAD65fE69245d\";\r\n        const desiredContractAddress = \"0x2e8d98fd126a32362f2bd8aa427e59a1ec63f780\";\r\n        return {\r\n            blockHash: \"0xa3d1765bc1099d6253ef38992c257092da33488d576b85efa338980857499b42\",\r\n            blockNumber: \"9221161\",\r\n            confirmations: \"34114\",\r\n            contractAddress: desiredContractAddress,\r\n            cumulativeGasUsed: \"2975510\",\r\n            from: \"0xb92ec3280324526dcc2366e3273fad65fe69245d\",\r\n            gas: \"77469\",\r\n            gasPrice: \"1500000016\",\r\n            gasUsed: \"51646\",\r\n            hash: \"0xa0336fa81536f4dcbe6bfe404d390d8dae998b2d5e1325f1813758c88b66a412\",\r\n            input: \"deprecated\",\r\n            nonce: \"27\",\r\n            timeStamp: \"1687436808\",\r\n            to: desiredToAddress,\r\n            tokenDecimal: \"6\",\r\n            tokenName: \"USDT\",\r\n            tokenSymbol: \"USDT\",\r\n            transactionIndex: \"24\",\r\n            value: String(value * Math.pow(10, 6))  // Multiply by 10^6 to match the decimals of USDT\r\n        };\r\n    };\r\n\r\n\r\n    public async componentDidMount() {\r\n\r\n        const comprobarEsExchange = this.isExchange(this.props.walletExchange);\r\n\r\n        if (!this.state.isWalletGenerated && !comprobarEsExchange) {\r\n            this.generateWallet();\r\n        }\r\n\r\n        this.startTimer();\r\n        // Obtener los precios del gas de las cadenas\r\n        const gasPrices = await this.getGasPrices();\r\n        const options = this.getOptions(gasPrices);\r\n\r\n        const transacciones = await this.fetchTransactions();\r\n\r\n        console.log('las transacciones ', transacciones);\r\n\r\n        // Obtener precio de la criptomoneda y calcular en la cantidad para despues hacer el fixed\r\n        const cryptoPrice = await this.getPrices();\r\n        const partialAmount = this.state.totalPrice / this.state.selectedCryptoPrice;\r\n        const priceFixed = partialAmount.toFixed(5)\r\n\r\n        this.setState({ selectedOption: options[0], gasPrices, selectedCryptoPrice: cryptoPrice, finalPrice: priceFixed, transactions: transacciones });\r\n\r\n        //const qrCode = await this.getQR();\r\n        //this.setState({ qrCode });\r\n\r\n        const { selectedCrypto, selectedNetwork, handleNetworkChange, switchNetwork, chains, isLoading, pendingChainId, cryptoNetworks, isError, data, balances } = this.props;\r\n\r\n        if (!chains.some((x) => x.id === parseInt(selectedNetwork, 10))) {\r\n\r\n            this.setState({ invalidNetwork: true })\r\n        }\r\n        console.log('esta es la network: ', selectedNetwork);\r\n\r\n    }\r\n\r\n    private intervalId: NodeJS.Timeout | null = null;\r\n\r\n    public async componentDidUpdate(prevProps: Readonly<IPaymentDataProps>, prevState: Readonly<IPaymentDataState>, snapshot?: any) {\r\n        if (!this.state.qrCode && !this.isExchange(this.props.walletExchange) && this.state.step === 1 && this.intervalId === null) {\r\n            // TODO descomenta las dos lineas de abajo cuando quieras que el codigo QR se ejecute\r\n            //const qr = await this.getQRCode();\r\n            //if (qr) this.setState({ qrCode: qr });\r\n\r\n            // Now set a new interval\r\n            this.intervalId = setInterval(() => this.fetchDataAndUpdateStep(), 3000);\r\n            console.log(this.intervalId);\r\n            console.log('aaa: ');\r\n            //this.simulateTransactions();\r\n            // TODO comenta la linea this.simulateTransactions() y descomenta la superior para que funcione en un entorno real\r\n        }\r\n\r\n        // comporbar boton de pago\r\n\r\n        if (this.props.balances !== prevProps.balances || this.state.finalPrice !== prevState.finalPrice) {\r\n            this.checkIfPayButtonShouldBeEnabled();\r\n        }\r\n\r\n        if ((this.props.isSuccessCoin || this.props.isSuccessToken) && !this.state.paymentCompletedOpen) {\r\n            console.log('se ha completado el pago');\r\n            console.log('se ha completado el pago Coin', this.props.dataHashCoin);\r\n            console.log('se ha completado el pago Token', this.props.dataHashToken);\r\n            this.setState({\r\n                paymentCompletedOpen: true\r\n            });\r\n            // TODO actualizar usuario\r\n            // TODO crear la transaccion\r\n            const newTransactionId = await this.createTransaccion(this.props.email);\r\n            if (newTransactionId) {\r\n                await this.updateUser(this.props.email, newTransactionId);\r\n            } else {\r\n                console.error('Error al crear la transacción');\r\n            }\r\n        }\r\n    }\r\n\r\n    private async updateUser(email: string, newTransactionId: string) {\r\n        try {\r\n            // Obtener el usuario existente\r\n            const currentUser = await findOneUsuario(email);\r\n\r\n            if (currentUser) {\r\n                // Crear una nueva lista de IDs que incluye los existentes y la nueva\r\n                const currentTransactionIds = currentUser.transaction_ids || []; // Utilizar un array vacío si es undefined\r\n                const updatedTransactionIds = [...currentTransactionIds, newTransactionId];\r\n\r\n                const userUpdate: Partial<Usuario> = {\r\n                    wallets: [{ address: this.props.address, network: this.props.selectedNetwork }],\r\n                    transaction_ids: updatedTransactionIds,\r\n                }\r\n                await updateUsuario(email, userUpdate);\r\n            } else {\r\n                // Manejar el caso cuando el usuario no se encuentra\r\n            }\r\n        }\r\n        catch (error) {\r\n            // Manejar el error\r\n        }\r\n    }\r\n\r\n\r\n    // TODO TRANSACCION BILLETERA\r\n    private async createTransaccion(email: string) {\r\n        try {\r\n\r\n            if (!this.props.selectedCrypto) {\r\n                // handle the error here, for example, throw an error or return from the function\r\n                throw new Error(\"No crypto selected\");\r\n            }\r\n            let id = null\r\n\r\n            if (this.props.dataHashCoin) {\r\n                id = this.props.dataHashCoin.hash;\r\n            } else {\r\n                id = this.props.dataHashToken.hash;\r\n            }\r\n\r\n            const networkId = parseFloat(this.props.selectedNetwork);\r\n            const selectedNetwork = this.props.selectedCrypto.networks.find(network => network.id === networkId);\r\n\r\n            if (selectedNetwork && selectedNetwork.contract_pay) {\r\n                const temp_wallet_id = selectedNetwork.contract_pay;\r\n\r\n                const transaccion: Transaccion = {\r\n                    hash: id,\r\n                    user_id: this.props.email,\r\n                    crypto_id: this.props.selectedCrypto?.id,\r\n                    amount_crypto: parseFloat(this.state.finalPrice),\r\n                    amount_fiat: this.state.totalPrice,\r\n                    status: \"confirmed\",\r\n                    network_id: this.props.selectedNetwork,\r\n                    temp_wallet_id: temp_wallet_id,\r\n                    invoice: { invoice_id: \"\", sent: false, downloaded: false }\r\n                }\r\n                const newTransaccion = await createTransaccion(transaccion);\r\n                return newTransaccion._id;\r\n                // Utiliza temp_wallet_id aquí...\r\n            } else {\r\n                throw new Error(`No network with id ${networkId}`);\r\n            }\r\n        }\r\n        catch (error) {\r\n\r\n        }\r\n    }\r\n\r\n\r\n    private getOptions(gasPrices: any): { value: number; label: JSX.Element; displayLabel: JSX.Element }[] {\r\n\r\n        const { isLoading, pendingChainId, cryptoNetworks } = this.props;\r\n        const { selectedOption } = this.state;\r\n\r\n        return this.props.chains\r\n            .filter((x) => {\r\n                const isCompatibleWithCrypto = cryptoNetworks.some(\r\n                    (network) => network.id === x.id\r\n                );\r\n                //console.log('esto es la isCompatibleWithCrypto: ', isCompatibleWithCrypto);\r\n                return isCompatibleWithCrypto;\r\n            })\r\n            .map((x) => {\r\n                const network = cryptoNetworks.find((network) => network.id === x.id);\r\n\r\n                //console.log('esto es la network: ', network);\r\n                const logo = network ? network.image : 'default_logo.png';\r\n\r\n                return {\r\n                    value: x.id,\r\n                    label: (\r\n                        <div className=\"custom-label\">\r\n                            <div className=\"crypto-logo2\">\r\n                                <img className=\"red-logo2\" src={logo} alt={`${x.name} logo`} /> {/* Logo */}\r\n                            </div>\r\n                            <span className=\"network-name\">{x.name}</span> {/* Nombre */}\r\n                            <span className=\"gas-price\">Coste de gas: {gasPrices[x.id]}$</span> {/* Precio del gas */}\r\n                            {isLoading && pendingChainId === x.id && <span className=\"switching-indicator\">(switching)</span>}\r\n                            <div className=\"circle-icon-border\">\r\n                                {selectedOption && selectedOption.value === x.id && (\r\n                                    <div className=\"circle-icon-fill\" />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    ),\r\n                    displayLabel: (\r\n                        <>\r\n                            <div className=\"custom-label small-label\">\r\n                                <img className=\"red-logo\" src={logo} alt={`${x.name} logo`} /> {/* Logo */}\r\n                                <span className=\"network-name\">{x.name}</span> {/* Nombre */}\r\n                            </div>\r\n                        </>\r\n                    ),\r\n                };\r\n\r\n\r\n            });\r\n    }\r\n\r\n    private checkSelectOpacity(): void {\r\n        // you could use 'document.body', or replace 'root' with the id of your main div\r\n        const mainWrapper = document.getElementById('interface-container');\r\n\r\n        if (this.state.menuIsOpen) {\r\n            mainWrapper?.classList.add('menu-open');\r\n        }\r\n        else {\r\n            mainWrapper?.classList.remove('menu-open');\r\n        }\r\n    }\r\n\r\n    private checkSelectOpacityInfo(): void {\r\n        // you could use 'document.body', or replace 'root' with the id of your main div\r\n        const mainWrapper2 = document.getElementById('interface-container');\r\n\r\n        if (this.state.menuInfoOpen) {\r\n            mainWrapper2?.classList.add('menu-open2');\r\n        }\r\n        else {\r\n            mainWrapper2?.classList.remove('menu-open2');\r\n        }\r\n    }\r\n\r\n    private checkSelectOpacityMetamaskInfo(): void {\r\n        // you could use 'document.body', or replace 'root' with the id of your main div\r\n        const mainWrapper2 = document.getElementById('interface-container');\r\n\r\n        if (this.state.menuMetamaskOpen) {\r\n            mainWrapper2?.classList.add('menu-open3');\r\n        }\r\n        else {\r\n            mainWrapper2?.classList.remove('menu-open3');\r\n        }\r\n    }\r\n\r\n    private checkSelectExpiredInvoiceInfo(): void {\r\n        // you could use 'document.body', or replace 'root' with the id of your main div\r\n        const mainWrapper2 = document.getElementById('interface-container');\r\n\r\n        if (this.state.expiredInvoice) {\r\n            mainWrapper2?.classList.add('menu-open4');\r\n        }\r\n        else {\r\n            mainWrapper2?.classList.remove('menu-open4');\r\n        }\r\n    }\r\n\r\n    private checkSelectInvalidNetworkInfo(): void {\r\n        // you could use 'document.body', or replace 'root' with the id of your main div\r\n        const mainWrapper2 = document.getElementById('interface-container');\r\n\r\n        if (this.state.invalidNetwork) {\r\n            mainWrapper2?.classList.add('menu-open5');\r\n        }\r\n        else {\r\n            mainWrapper2?.classList.remove('menu-open5');\r\n        }\r\n    }\r\n\r\n    private isExchange(walletExchange: Wallet | Exchange | null): boolean {\r\n        // Si walletExchange es null, devuelve false.\r\n        if (walletExchange === null) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    renderInfoContainer() {\r\n\r\n        // Calcula el importe parcial\r\n        const { selectedCrypto } = this.props;\r\n        const partialAmount = this.state.totalPrice / this.state.selectedCryptoPrice;\r\n\r\n        //console.log(partialAmount);\r\n        //console.log(partialAmount.toFixed(8));\r\n        const priceFixed = partialAmount.toFixed(8)\r\n\r\n        if (!this.state.menuInfoOpen) {\r\n            return null;\r\n        }\r\n\r\n        const minutes = Math.floor(this.state.timeLeft / 60);\r\n        const seconds = this.state.timeLeft % 60;\r\n\r\n        return (\r\n            <div className=\"info-container\" >\r\n                <div className=\"info-item-title\">\r\n                    <h3 className=\"info-time\">Envíe su pago en {minutes}:{seconds < 10 ? '0' : ''}{seconds}</h3>\r\n                    <span className=\"material-symbols-outlined close-modal\" onClick={() => this.setState({ menuInfoOpen: false })}>\r\n                        cancel\r\n                    </span>\r\n                </div>\r\n                <div className=\"info-item\">\r\n                    <div className=\"info-label\">Precio total:</div>\r\n                    <div className=\"info-value\">{this.state.totalPrice} USD</div>\r\n                </div>\r\n                <div className=\"info-item\">\r\n                    <div className=\"info-label\">Tipo de cambio:</div>\r\n                    <div className=\"info-value\">{this.state.selectedCryptoPrice} USD</div>\r\n                </div>\r\n                <div className=\"info-item\">\r\n                    <div className=\"info-label\">Importe parcial:</div>\r\n                    <div className=\"info-value\">{priceFixed} {selectedCrypto?.symbol}</div>\r\n                </div>\r\n                <div className=\"info-item\">\r\n                    <div className=\"info-label\">Coste de red:</div>\r\n                    <div className=\"info-value\">...</div>\r\n                </div>\r\n                <div className=\"info-item-total\">\r\n                    <div className=\"info-label\">Importe total:</div>\r\n                    <div className=\"info-value\">...</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderInfoMetamaskContainer() {\r\n        if (!this.state.menuMetamaskOpen) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"info-metamask-container\" >\r\n                <div className=\"info-item-title\">\r\n                    <h3 className=\"info-time\">Escanea para continuar en Metamask</h3>\r\n                    <span className=\"material-symbols-outlined close-modal\" onClick={() => this.setState({ menuMetamaskOpen: false })}>\r\n                        cancel\r\n                    </span>\r\n                </div>\r\n                <div className=\"info-time\">\r\n                    <img className=\"img-qr\" src=\"/qr-code.png\"></img>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderInfoExpiredInvoiceContainer() {\r\n        if (!this.state.expiredInvoice) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"info-expired-invoice-container\" >\r\n                <div className=\"info-item-title\">\r\n                    <h3 className=\"info-time\">Factura caducada</h3>\r\n                    <span className=\"material-symbols-outlined close-modal\" onClick={() => this.setState({ expiredInvoice: false })}>\r\n                        cancel\r\n                    </span>\r\n                </div>\r\n                <div className=\"info-item\">\r\n                    <div className=\"info-label\">Una factura solo es válida durante 15 minutos. Si quiere crear otra para realizar el pago, pulse en el siguiente botón</div>\r\n                </div>\r\n                <div className=\"info-try-again\">\r\n                    <div className=\"try-again-button\">Intentar de nuevo</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /*  AÑADIR NUEVO */\r\n\r\n    copyToClipboard = async (text: string, type: string) => {\r\n        try {\r\n            await navigator.clipboard.writeText(text);\r\n\r\n            if (type === 'address') {\r\n                this.setState({ copiedAddress: true });\r\n            } else if (type === 'amount') {\r\n                this.setState({ copiedAmount: true });\r\n            }\r\n\r\n            setTimeout(() => {\r\n                if (type === 'address') {\r\n                    this.setState({ copiedAddress: false });\r\n                } else if (type === 'amount') {\r\n                    this.setState({ copiedAmount: false });\r\n                }\r\n            }, 1000);\r\n\r\n            console.log('Text copied to clipboard');\r\n        } catch (err) {\r\n            console.log('Error copying text: ', err);\r\n        }\r\n    }\r\n\r\n    renderInfoAddressPaymentContainer() {\r\n        if (!this.state.addressPaymentOpen) {\r\n            return null;\r\n        }\r\n\r\n        const comprobarEsExchange = this.isExchange(this.props.walletExchange);\r\n\r\n        return (\r\n            <div className=\"info-address-payment-container\" >\r\n                <div className=\"info-item-title\">\r\n                    <h3 className=\"info-time\">Datos</h3>\r\n                    <span className=\"material-symbols-outlined close-modal\" onClick={() => this.setState({ addressPaymentOpen: false })}>\r\n                        cancel\r\n                    </span>\r\n                </div>\r\n                <div className=\"info-copy-data\">\r\n                    Dirección\r\n                    <div className=\"copy-data\">\r\n                        {this.state.walletAddress}\r\n                        <span className=\"material-symbols-outlined copy-element\" onClick={() => this.copyToClipboard(this.state.walletAddress, 'address')}>\r\n                            {this.state.copiedAddress ? 'done' : 'content_copy'}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"info-copy-data\">\r\n                    Importe total\r\n                    <div className=\"copy-data\">\r\n                        0.0012954 BTC\r\n                        <span className=\"material-symbols-outlined copy-element\" onClick={() => this.copyToClipboard('0.0012954', 'amount')}>\r\n                            {this.state.copiedAmount ? 'done' : 'content_copy'}\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    renderInfoPaymentContainer() {\r\n        if (!this.state.infoPaymentOpen) {\r\n            return null;\r\n        }\r\n        // Calcula el importe parcial\r\n        const { selectedCrypto } = this.props;\r\n        const partialAmount = this.state.totalPrice / this.state.selectedCryptoPrice;\r\n\r\n        //console.log(partialAmount);\r\n        //console.log(partialAmount.toFixed(8));\r\n        const priceFixed = partialAmount.toFixed(5)\r\n\r\n        const minutes = Math.floor(this.state.timeLeft / 60);\r\n        const seconds = this.state.timeLeft % 60;\r\n\r\n        return (\r\n            <div className=\"info-container-partial-payment\" >\r\n                <div className=\"info-item-title\">\r\n                    <h3 className=\"info-time\">Envíe su pago en {minutes}:{seconds < 10 ? '0' : ''}{seconds}</h3>\r\n                    <span className=\"material-symbols-outlined close-modal\" onClick={() => this.setState({ infoPaymentOpen: false })}>\r\n                        cancel\r\n                    </span>\r\n                </div>\r\n                <div className=\"info-item\">\r\n                    <div className=\"info-label\">Precio total:</div>\r\n                    <div className=\"info-value\">{this.state.totalPrice} USD</div>\r\n                </div>\r\n                <div className=\"info-item\">\r\n                    <div className=\"info-label\">Tipo de cambio:</div>\r\n                    <div className=\"info-value\">{this.state.selectedCryptoPrice} USD</div>\r\n                </div>\r\n                <div className=\"info-item\">\r\n                    <div className=\"info-label\">Importe parcial:</div>\r\n                    <div className=\"info-value\">{priceFixed} {selectedCrypto?.symbol}</div>\r\n                </div>\r\n                <div className=\"info-item\">\r\n                    <div className=\"info-label\">Coste de red:</div>\r\n                    <div className=\"info-value\">...</div>\r\n                </div>\r\n                <div className=\"info-item\">\r\n                    <div className=\"info-label\">Ha sido pagado:</div>\r\n                    <div className=\"info-value\">...</div>\r\n                </div>\r\n                <div className=\"info-item-total\">\r\n                    <div className=\"info-label\">Importe total:</div>\r\n                    <div className=\"info-value\">...</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderInfoPaymentCompletedContainer() {\r\n        const { hashes } = this.state; // Suponiendo que los hashes están almacenados en el estado\r\n    \r\n        if (!this.state.paymentCompletedOpen) {\r\n            return null;\r\n        }\r\n    \r\n        return (\r\n            <div className=\"info-payment-completed-container\" >\r\n                <div className=\"info-item-title\">\r\n                    <h3 className=\"info-time\">Pago completado</h3>\r\n                    <span className=\"material-symbols-outlined close-modal\" onClick={() => this.setState({ paymentCompletedOpen: false })}>\r\n                        cancel\r\n                    </span>\r\n                </div>\r\n                <div className=\"info-item\">\r\n                    <div className=\"info-label\">¡Tu pago ha sido completado con éxito! Gracias por utilizar nuestras servicios. Puedes ver los detalles de tu transacción a continuación.</div>\r\n                </div>\r\n                <div className=\"info-try-again\">\r\n                    <a className=\"try-again-button\" href={`https://goerli.etherscan.io/tx/${hashes[hashes.length - 1]}`} target=\"_blank\" rel=\"noopener noreferrer\">Ver detalles</a>\r\n                </div>\r\n                {hashes.map((hash, index) => (\r\n                    <div key={index}>\r\n                        <a href={`https://goerli.etherscan.io/tx/${hash}`} target=\"_blank\" rel=\"noopener noreferrer\">{hash}</a>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n    \r\n\r\n    renderInfoPartialPaymentContainer() {\r\n        if (!this.state.partialPaymentOpen) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"info-partial-payment-container\" >\r\n                <div className=\"info-item-title\">\r\n                    <h3 className=\"info-time\">Pago parcialmente recibido</h3>\r\n                    <span className=\"material-symbols-outlined close-modal\" onClick={() => this.setState({ partialPaymentOpen: false })}>\r\n                        cancel\r\n                    </span>\r\n                </div>\r\n                <div className=\"info-item\">\r\n                    <div className=\"info-label\">Hemos detectado tu pago, pero la cantidad enviada es inferior a la cantidad requerida. Por favor, envía el saldo restante para completar tu transacción.</div>\r\n                </div>\r\n                <div className=\"info-try-again\">\r\n                    <div className=\"try-again-button\" onClick={() => this.setState({ partialPaymentOpen: false })}>Pagar faltante</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /* Aplicar CSS modales */\r\n\r\n    private checkInfoAddressPayment(): void {\r\n        // you could use 'document.body', or replace 'root' with the id of your main div\r\n        const mainWrapper = document.getElementById('interface-container');\r\n\r\n        if (this.state.addressPaymentOpen) {\r\n            mainWrapper?.classList.add('menu-open5');\r\n        }\r\n        else {\r\n            mainWrapper?.classList.remove('menu-open5');\r\n        }\r\n    }\r\n    private checkInfoPayment(): void {\r\n        // you could use 'document.body', or replace 'root' with the id of your main div\r\n        const mainWrapper = document.getElementById('interface-container');\r\n\r\n        if (this.state.infoPaymentOpen) {\r\n            mainWrapper?.classList.add('menu-open6');\r\n        }\r\n        else {\r\n            mainWrapper?.classList.remove('menu-open6');\r\n        }\r\n    }\r\n    private checkInfoPaymentCompleted(): void {\r\n        // you could use 'document.body', or replace 'root' with the id of your main div\r\n        const mainWrapper = document.getElementById('interface-container');\r\n\r\n        if (this.state.paymentCompletedOpen) {\r\n            mainWrapper?.classList.add('menu-open7');\r\n        }\r\n        else {\r\n            mainWrapper?.classList.remove('menu-open7');\r\n        }\r\n    }\r\n    private checkInfoPartialPayment(): void {\r\n        // you could use 'document.body', or replace 'root' with the id of your main div\r\n        const mainWrapper = document.getElementById('interface-container');\r\n\r\n        if (this.state.partialPaymentOpen) {\r\n            mainWrapper?.classList.add('menu-open8');\r\n        }\r\n        else {\r\n            mainWrapper?.classList.remove('menu-open8');\r\n        }\r\n    }\r\n\r\n\r\n    /* HASTA AQUI */\r\n\r\n    private async fetchDataAndUpdateStep() {\r\n\r\n        this.getContractAddressCrypto(); // tengo que saber si hay contrato o no antes de hacer las peticiones\r\n        const transactions = await this.fetchTransactions();\r\n        console.log('transacciones: ', transactions);\r\n        if (transactions && transactions.length) {\r\n            this.checkPaymentStatus(transactions);\r\n        }\r\n    }\r\n\r\n\r\n    private modalPartialPayment(): JSX.Element {\r\n        if (!this.state.modalPartialPayment) return <></>;\r\n\r\n        // Configura un temporizador para cerrar el modal después de 5 segundos (5000 milisegundos)\r\n        setTimeout(() => {\r\n            this.setState({ modalPartialPayment: false });\r\n        }, 1000000);\r\n\r\n        return (\r\n            <div className=\"relative-container\">\r\n                <div className=\"modal\">\r\n                    Pago parcialmente recibido\r\n                    <span className=\"material-symbols-outlined\" onClick={() => this.setState({ modalPartialPayment: false })}>\r\n                        cancel\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderStepperPayment() {\r\n        if (this.state.step === 5) return \"\";\r\n        return (\r\n            <>\r\n                <div className=\"stepper-4\">\r\n                    <div>\r\n                        <div className={`step-4 ${this.state.step >= 1 ? \"active-4\" : \"\"}`}>\r\n                            <div className=\"circle-4\"></div>\r\n                        </div>\r\n                        {this.state.step === 1 && <div className=\"step-text\">Esperando pago</div>}\r\n                    </div>\r\n                    <div>\r\n                        <div className={`step-4 ${this.state.step >= 2 ? \"active-4\" : \"\"}`}>\r\n                            <div className=\"line-4\"></div>\r\n                            <div className=\"circle-4\"></div>\r\n                        </div>\r\n                        {this.state.step === 2 && <div className=\"step-text\">Pago parcialmente recibido</div>}\r\n                    </div>\r\n                    <div>\r\n                        <div className={`step-4 ${this.state.step >= 3 ? \"active-4\" : \"\"}`}>\r\n                            <div className=\"line-4\"></div>\r\n                            <div className=\"circle-4\"></div>\r\n                        </div>\r\n                        {this.state.step === 3 && <div className=\"step-text\">Esperando confirmación</div>}\r\n                    </div>\r\n                    <div>\r\n                        <div className={`step-4 ${this.state.step >= 4 ? \"active-4\" : \"\"}`}>\r\n                            <div className=\"line-4\"></div>\r\n                            <div className=\"circle-4\"></div>\r\n                        </div>\r\n                        {this.state.step === 4 && <div className=\"step-text\">Pago completado</div>}\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderInfoInvalidNetworkContainer() {\r\n        if (!this.state.invalidNetwork) {\r\n            return null;\r\n        }\r\n        const { selectedCrypto, selectedNetwork, handleNetworkChange, switchNetwork, pendingChainId, isloadingnetwork } = this.props;\r\n        const { selectedOption } = this.state;\r\n        const handleOptionChange = (red: number) => {\r\n\r\n            //console.log('************', selectedOption);\r\n            switchNetwork?.(1);\r\n            //console.log('pendingChainId ', pendingChainId);\r\n            {\r\n                isloadingnetwork && (\r\n\r\n                    console.log('estoy esperando a que cambies'),\r\n                    this.setState({ invalidNetwork: false })\r\n                )\r\n            }\r\n        };\r\n        return (\r\n            <div className=\"info-invalid-network-container\" >\r\n                <div className=\"info-item-title\">\r\n                    <h3 className=\"info-time\">Red equivocada</h3>\r\n                    <div onClick={() => this.setState({ invalidNetwork: false })}>X</div>\r\n                </div>\r\n                <div className=\"info-item\">\r\n                    <div className=\"info-label\">La factura ha sido creada para realizar el pago por otras redes. Para continuar, por favor cambie la red en ajustes de Metamask. O haga clic abajo</div>\r\n                </div>\r\n                <div className=\"info-item\">\r\n                    <div className=\"network-change-button\" onClick={() => handleOptionChange(1)}>Conectar a Etherum Mainnet</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderQRPayment() {\r\n        //if (!this.isExchange ()) return \"\"; \r\n\r\n        if (!this.state.qrCode) {\r\n            //return <span>Cargando código QR...</span>;\r\n            return <div className=\"lds-roller\" style={{ width: '75px', height: '100px' }}><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n        }\r\n\r\n        function arrayBufferToBase64(buffer: any) {\r\n            let binary = '';\r\n            let bytes = [].slice.call(new Uint8Array(buffer));\r\n            bytes.forEach((b) => binary += String.fromCharCode(b));\r\n            return window.btoa(binary);\r\n        }\r\n\r\n        let base64Image = arrayBufferToBase64(this.state.qrCode);\r\n\r\n        return (\r\n            <div className=\"info-qr-exchange\">\r\n                <img className=\"img-qr-exchange\" src={`data:image/png;base64,${base64Image}`} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // TODO Poner el valor data.data que es la billetera\r\n    // TODO Poner la imagen que corresponda en el data.logo\r\n    private async getQRCode(): Promise<string> {\r\n        const axios = require('axios');\r\n        const options = {\r\n            method: 'POST',\r\n            url: 'https://qrcode-monkey.p.rapidapi.com/qr/custom',\r\n            responseType: 'arraybuffer', // Make sure we get a Blob\r\n            headers: {\r\n                'content-type': 'application/json',\r\n                'X-RapidAPI-Key': 'a27538d0admsh91a560dc2646b83p1bf9f9jsn2bd53d9e6666',\r\n                'X-RapidAPI-Host': 'qrcode-monkey.p.rapidapi.com'\r\n            },\r\n            data: {\r\n                data: \"0xb92eC3280324526dCc2366E3273fAD65fE69245d\",\r\n                config: {\r\n                    body: 'dot',\r\n                    eye: 'frame13',\r\n                    eyeBall: 'ball14',\r\n                    erf1: [],\r\n                    erf2: ['fh'],\r\n                    erf3: ['fv'],\r\n                    brf1: [],\r\n                    brf2: ['fh'],\r\n                    brf3: ['fv'],\r\n                    bodyColor: '#EDEDED',\r\n                    bgColor: '#292929',\r\n                    eye1Color: '#EDEDED',\r\n                    eye2Color: '#EDEDED',\r\n                    eye3Color: '#EDEDED',\r\n                    eyeBall1Color: '#EDEDED',\r\n                    eyeBall2Color: '#EDEDED',\r\n                    eyeBall3Color: '#EDEDED',\r\n                    gradientColor1: '#EDEDED',\r\n                    gradientColor2: '#EDEDED',\r\n                    gradientType: 'radial',\r\n                    gradientOnEyes: false,\r\n                    logo: \"https://icons.iconarchive.com/icons/cjdowner/cryptocurrency-flat/512/Tether-USDT-icon.png\"\r\n                },\r\n                size: 300,\r\n                download: false,\r\n                file: 'png'\r\n            }\r\n        };\r\n\r\n        try {\r\n            const response = await axios.request(options);\r\n            console.log('devuelvo esto: ', response.data);\r\n            return response.data;\r\n        } catch (error) {\r\n            return \"\";\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    formatNumber(value: string | undefined) {\r\n        if (value) {\r\n            const numberValue = parseFloat(value);\r\n            if (!Number.isInteger(numberValue)) {\r\n                return numberValue.toFixed(5);\r\n            }\r\n            return value;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    getContractAddress() {\r\n        const { selectedCrypto, selectedNetwork } = this.props;\r\n\r\n        // Encuentra la red seleccionada dentro de las redes de la criptomoneda seleccionada\r\n        const network = selectedCrypto?.networks.find((net: { id: number; }) => net.id === Number(selectedNetwork));\r\n\r\n        // Comprueba si hay un contract_address para la red seleccionada y devuelve el resultado\r\n        return network ? !!network.contract_address : false;\r\n    }\r\n\r\n\r\n    checkIfPayButtonShouldBeEnabled() {\r\n        const { balances } = this.props;\r\n        const { finalPrice } = this.state;\r\n        console.log('PRECIO QUE DEBES PAGAR: ', finalPrice);\r\n        console.log('balance tokens: ', balances);\r\n        console.log('balance ETH: ', this.formatNumber(this.props.data?.formatted));\r\n\r\n        const tipoContractAddress = this.getContractAddress();\r\n\r\n\r\n        if (!tipoContractAddress) {\r\n            console.log('Soy ETH ');\r\n            if (this.props.data.formatted >= parseFloat(finalPrice)) {\r\n                this.setState({ isPayButtonEnabled: true });\r\n            }\r\n            else {\r\n                this.setState({ isPayButtonEnabled: false });\r\n            }\r\n        }\r\n        else {\r\n            if (finalPrice && balances) {\r\n                const isPayButtonEnabled = balances >= parseFloat(finalPrice);\r\n                this.setState({ isPayButtonEnabled });\r\n            } else {\r\n                this.setState({ isPayButtonEnabled: false });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    pay() {\r\n        console.log('aqui hago el pago');\r\n\r\n    }\r\n\r\n\r\n    public render() {\r\n        this.checkSelectOpacity();\r\n        this.checkSelectOpacityInfo();\r\n        this.checkSelectOpacityMetamaskInfo();\r\n        this.checkSelectExpiredInvoiceInfo();\r\n        this.checkSelectInvalidNetworkInfo();\r\n\r\n        /* AÑADIR NUEVOS METODOS */\r\n\r\n        this.checkInfoAddressPayment();\r\n        this.checkInfoPayment();\r\n        this.checkInfoPaymentCompleted();\r\n        this.checkInfoPartialPayment();\r\n\r\n        const { isInfoVisible } = this.state;\r\n        const { selectedCrypto, selectedNetwork, handleNetworkChange, switchNetwork, chains, isLoading, pendingChainId, cryptoNetworks, isError, data, balances } = this.props;\r\n        const { gasPrices, selectedOption, finalPrice } = this.state;\r\n\r\n        const handleOptionChange = (selectedOption: any) => {\r\n\r\n            //console.log('/*/*/*/*/*/*/*', selectedOption);\r\n            if (selectedOption && selectedOption.value) {\r\n                handleNetworkChange(selectedOption.value);\r\n                this.setState({ selectedOption });\r\n            }\r\n        };\r\n\r\n        const comprobarEsExchange = this.isExchange(this.props.walletExchange);\r\n        const timeLeftPercentage = ((this.state.timeLeft / this.state.totalTime) * 100).toFixed(2);\r\n        const strokeDashoffset = (282.6 * (this.state.timeLeft / this.state.totalTime)).toFixed(2);\r\n\r\n        console.log(balances);\r\n        console.log(data);\r\n        console.log('saldo de la cripto elegida: ', parseFloat(data?.formatted).toFixed(5));\r\n\r\n\r\n\r\n\r\n        if (this.props.isSuccessCoin || this.props.isSuccessToken) {\r\n\r\n        }\r\n\r\n        //dataHashCoin: any,\r\n        //dataHashToken: any,\r\n\r\n\r\n        return (\r\n            <><div className=\"right-section-header\">\r\n                <h2>Datos de pago</h2>\r\n                <div className=\"close-button-container\">\r\n                    <span className=\"material-symbols-outlined close-modal\" /*onClick={() => this.setState({ menuInfoOpen: false })}*/>\r\n                        cancel\r\n                    </span>\r\n                </div>\r\n            </div>\r\n                <div className=\"payment-data\">\r\n                    {this.renderInfoContainer()}\r\n                    {this.renderInfoMetamaskContainer()}\r\n                    {this.renderInfoExpiredInvoiceContainer()}\r\n                    {this.renderInfoPaymentCompletedContainer()}\r\n                    {!comprobarEsExchange && (\r\n                        <>\r\n                            {this.renderInfoAddressPaymentContainer()}\r\n                            {this.renderInfoPaymentContainer()}\r\n\r\n                            {this.renderInfoPartialPaymentContainer()}\r\n                        </>\r\n                    )}\r\n                    {comprobarEsExchange && this.renderInfoInvalidNetworkContainer()}\r\n                    <div className=\"crypto-network-container\">\r\n                        <div className=\"selected-crypto\">\r\n\r\n                            <div className=\"crypto-logo\">\r\n                                <img className=\"imagen-logo\" src={selectedCrypto?.image} alt={`${selectedCrypto?.name} logo`} />\r\n                            </div>\r\n                            <div className=\"crypto-info\">\r\n                                <div className=\"crypto-name\">{selectedCrypto?.name}</div>\r\n                                <div className=\"crypto-symbol\">{selectedCrypto?.symbol}</div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"timer-container\" onClick={() => {\r\n                            console.log('menuAbierto')\r\n                            //this.checkSelectOpacityInfo()\r\n                            this.setState({ menuInfoOpen: true }) // Esto cambiará el estado cada vez que se haga click\r\n                        }}>\r\n                            <svg width=\"40\" height=\"40\" viewBox=\"0 0 100 100\" className=\"timer-bar\" style={{ transform: 'rotate(-90deg)' as const }}>\r\n                                <circle cx=\"50\" cy=\"50\" r=\"45\" stroke-width=\"8\" fill=\"none\" className=\"timer-bar__meter\" />\r\n                                <circle id=\"countdown\" cx=\"50\" cy=\"50\" r=\"45\" stroke-width=\"8\" fill=\"none\" className=\"timer-bar__value\" stroke-dasharray=\"282.6\" stroke-dashoffset={strokeDashoffset} />\r\n                            </svg>\r\n                        </div>\r\n                        {comprobarEsExchange && (\r\n\r\n                            <div className=\"network-selector\">\r\n                                <>\r\n\r\n                                    <Select\r\n                                        className=\"selector-red\"\r\n                                        classNamePrefix=\"my-select\"\r\n                                        isDisabled={!switchNetwork}\r\n                                        value={selectedOption}\r\n                                        onChange={handleOptionChange}\r\n                                        options={this.getOptions(this.state.gasPrices)}\r\n                                        isSearchable={false}\r\n                                        //menuIsOpen={true}\r\n                                        onMenuOpen={() => {\r\n                                            console.log(\"menuAbierto\")\r\n                                            this.setState({ menuIsOpen: true })\r\n                                        }}\r\n                                        onMenuClose={() => this.setState({ menuIsOpen: false })}\r\n                                        formatOptionLabel={(data, state) => {\r\n                                            if (state.context === 'menu') {\r\n                                                // Cuando esté en el menú, mostramos todo\r\n                                                return data.label;\r\n                                            } else {\r\n                                                // Cuando la opción es la seleccionada, mostramos solo el logo y el nombre\r\n                                                return data.displayLabel;\r\n                                            }\r\n                                        }}\r\n                                        styles={{\r\n                                            control: (provided) => ({\r\n                                                ...provided,\r\n                                                width: this.state.menuIsOpen ? 'auto' : 200,\r\n                                            }),\r\n                                        }}\r\n                                    />\r\n                                </>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    {comprobarEsExchange && (\r\n                        <div className=\"wallet-balance\">\r\n                            {isLoading && (<div>Comprobando criptomonedas…</div>)}\r\n                            {isError && (<div>Error comprobando balance</div>)}\r\n                            <div className=\"align-left\">\r\n                                Tiene en su billetera:\r\n                            </div>\r\n                            <div className=\"flex-container-2\">\r\n                                <img className=\"imagen-logo-data\" src={selectedCrypto?.image} alt={`${selectedCrypto?.name} logo`} />\r\n                                <div className=\"crypto-name-data\">{selectedCrypto?.name}</div>\r\n                                <div className=\"crypto-balance-data\">{this.formatNumber(balances as any)}{balances === undefined && this.formatNumber(data?.formatted)} {selectedCrypto?.symbol}</div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                    {!comprobarEsExchange /*&& this.state.qrCode*/ && (\r\n                        // Si es un exchange mostrará el código QR donde realizar el pago\r\n                        <>\r\n                            {this.renderQRPayment()}\r\n                        </>\r\n                    )}\r\n                    <div className=\"total-to-pay\">\r\n                        <div className=\"align-left\">\r\n                            Total a pagar:\r\n                        </div>\r\n                        <div className=\"price-copy\">\r\n                            {finalPrice} {selectedCrypto?.symbol}\r\n                            {!comprobarEsExchange && (\r\n                                <span className=\"material-symbols-outlined copy-element\" onClick={() => this.setState({ addressPaymentOpen: true })}>\r\n                                    content_copy\r\n                                </span>\r\n                            )}\r\n\r\n                        </div>\r\n                    </div>\r\n                    {comprobarEsExchange && (\r\n                        <div className=\"metamask-button\" onClick={() => {\r\n                            console.log('menuAbierto')\r\n                            //this.checkSelectOpacityInfo()\r\n                            this.setState({ menuMetamaskOpen: true }) // Esto cambiará el estado cada vez que se haga click\r\n                        }}>\r\n                            Pagar con Metamask App\r\n                        </div>\r\n                    )}\r\n                    {!comprobarEsExchange && (\r\n                        <>\r\n                            {/*this.fetchTransactions()*/}\r\n                            {this.renderStepperPayment()}\r\n                        </>\r\n                    )}\r\n                </div>\r\n                {comprobarEsExchange && (\r\n                    <div\r\n                        className={`pay-button ${!this.state.isPayButtonEnabled ? 'disabled' : ''}`}\r\n                        onClick={this.state.isPayButtonEnabled ? () => this.props.onClick(finalPrice) : undefined}\r\n                    >\r\n                        Pagar\r\n                    </div>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n}","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\paymentSteps.tsx",[],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\pedingConnection.tsx",["90","91","92"],[],"import { Exchange, Wallet } from '@/definitions/global';\r\nimport * as React from 'react';\r\n\r\nexport interface IPedingConnectionProps {\r\n\r\n    onClick: (wallet: Wallet) => void;\r\n    currentStep: number;\r\n    connectedObject: Wallet | Exchange;\r\n    inicioStep: () => void;\r\n    billeteras: Wallet[];\r\n\r\n}\r\n\r\nexport interface IPedingConnectionState {\r\n}\r\n\r\nexport default class PedingConnection extends React.Component<IPedingConnectionProps, IPedingConnectionState> {\r\n    constructor(props: IPedingConnectionProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    private logoImg(wallet: Wallet) {\r\n\r\n        const billeteras = this.props.billeteras;\r\n\r\n        for (let i = 0; i < billeteras.length; i++) {\r\n            if (billeteras[i].id === wallet.id) {\r\n                return billeteras[i].logoImg;\r\n            }\r\n        }\r\n        // Devolverá null si no se encuentra una coincidencia\r\n        return '';\r\n    }\r\n\r\n    public renderIsLoanding() {\r\n        return (\r\n            <>\r\n                <div className=\"right-section-header\">\r\n                <h2>Realizando la conexión</h2>\r\n                    <div className=\"close-button-container\">\r\n                    <span className=\"material-symbols-outlined close-modal\" /*onClick={() => this.setState({ menuInfoOpen: false })}*/>\r\n                            cancel\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"wallets-container\">\r\n                    <div className=\"wallet-button wallet-name-loading\">\r\n                        <div className=\"wallet-logo-container\">\r\n                            <img className=\"imagen-logo\" src={this.logoImg(this.props.connectedObject)} alt=\"\" />\r\n                        </div>\r\n                        <span className=\"wallet-name\">Conectando...</span>\r\n                        <span className=\"wallet-name\">Seleccione y desbloquee la billetera</span>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    public renderIsConnected() {\r\n        return (\r\n            <>\r\n                <div className=\"right-section-header\">\r\n                <h2>Conexión realizada</h2>\r\n                    <div className=\"close-button-container\">\r\n                    <span className=\"material-symbols-outlined close-modal\" /*onClick={() => this.setState({ menuInfoOpen: false })}*/>\r\n                            cancel\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"wallets-container\">\r\n                    <div className=\"wallet-button wallet-name-connected\">\r\n                        <div className=\"wallet-logo-container\">\r\n                            <img className=\"imagen-logo\" src={this.logoImg(this.props.connectedObject)} alt=\"\" />\r\n                        </div>\r\n                        <span className=\"wallet-name\">¡Billetera conectada!</span>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    public renderIsCancelled() {\r\n        return (\r\n            <>\r\n                <div className=\"right-section-header\">\r\n                    <h2>Conexión rechazada</h2>\r\n                    <div className=\"close-button-container\">\r\n                    <span className=\"material-symbols-outlined close-modal\" /*onClick={() => this.setState({ menuInfoOpen: false })}*/>\r\n                            cancel\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"wallets-container\">\r\n                    <div className=\"wallet-button wallet-name-cancelled\">\r\n                        <div className=\"wallet-logo-container\">\r\n                            <img className=\"imagen-logo\" src={this.logoImg(this.props.connectedObject)} alt=\"\" />\r\n                        </div>\r\n                        <div className=\"wallet-name-container\">\r\n                            <span className=\"wallet-name\">La conexión con Metamask ha sido rechazada </span>\r\n                            <span className=\"wallet-name-retun\" onClick={() => {\r\n                                this.props.onClick(this.props.connectedObject);\r\n                                console.log('esta es la wallet: ', this.props.connectedObject.id);\r\n                            }}>Volver a intentarlo</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"wallets-return\" onClick={() => {\r\n                        this.props.inicioStep();\r\n                    }}>\r\n                        Volver a las billeteras\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n        \r\n    }\r\n\r\n    public renderSelector() {\r\n\r\n        switch (this.props.currentStep) {\r\n\r\n            case 2:\r\n                return this.renderIsLoanding()\r\n            case 3:\r\n                return this.renderIsConnected()\r\n            case 4:\r\n                return this.renderIsCancelled()\r\n\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <>\r\n                {this.renderSelector()}\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\profile.tsx",[],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\selectorCrypto.tsx",["93"],[],"import * as React from 'react';\r\nimport { Exchange, Wallet, Crypto, Network } from '@/definitions/global';\r\nimport Image from 'next/image'\r\n\r\nexport interface ISelectorCryptoProps {\r\n    walletExchange: Wallet | Exchange;\r\n    cryptos: Crypto[];\r\n    onClick: (cryptos: Crypto) => void;\r\n}\r\n\r\nexport interface ISelectorCryptoState {\r\n}\r\n\r\nexport default class SelectorCrypto extends React.Component<ISelectorCryptoProps, ISelectorCryptoState> {\r\n    constructor(props: ISelectorCryptoProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    private compareCrypto(walletExchange: Wallet | Exchange) {\r\n\r\n        const cryptos = this.props.cryptos;\r\n        let matchingCryptos = [];\r\n\r\n        if (!(walletExchange as any).nameExchange) {\r\n\r\n            for (let i = 0; i < cryptos.length; i++) {\r\n                let matchingNetworks = [];\r\n                for (let j = 0; j < cryptos[i].networks.length; j++) {\r\n                    for (let k = 0; k < (walletExchange as any).chains.length; k++) {\r\n                        if (cryptos[i].networks[j].id === (walletExchange as any).chains[k].id) {\r\n                            matchingNetworks.push(cryptos[i].networks[j]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                matchingCryptos.push({\r\n                    crypto: cryptos[i],\r\n                    networks: matchingNetworks\r\n                });\r\n            }\r\n\r\n        }\r\n        else if (walletExchange as Exchange) {\r\n            for (let i = 0; i < cryptos.length; i++) {\r\n                let matchingNetworks = [];\r\n                for (let j = 0; j < cryptos[i].networks.length; j++) {\r\n                    for (let k = 0; k < (walletExchange as any).supported_cryptocurrencies?.length; k++) {\r\n                        for (let l = 0; l < (walletExchange as any).supported_cryptocurrencies[k].networks.length; l++) {\r\n                            if (cryptos[i].networks[j].id === (walletExchange as any).supported_cryptocurrencies[k].networks[l].id) {\r\n                                matchingNetworks.push(cryptos[i].networks[j]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n        \r\n                matchingCryptos.push({\r\n                    crypto: cryptos[i],\r\n                    networks: matchingNetworks\r\n                });\r\n            }\r\n        }\r\n        \r\n\r\n\r\n        return matchingCryptos;\r\n    }\r\n\r\n    public render() {\r\n        let matchingCryptos = this.compareCrypto(this.props.walletExchange);\r\n\r\n        return (\r\n            <>\r\n                <div className=\"right-section-header\">\r\n                    <div className=\"\">\r\n                        <h2>\r\n                            Criptomonedas ({matchingCryptos.length})\r\n                        </h2>\r\n                    </div>\r\n                    <div className=\"close-button-container\">\r\n                        <span className=\"material-symbols-outlined close-modal\" /*onClick={() => this.setState({ menuInfoOpen: false })}*/>\r\n                            cancel\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"wallets-container\">\r\n                    {\r\n                        matchingCryptos.map((matchedCrypto, index) => (\r\n                            <div\r\n                                key={index}\r\n                                className={`crypto-container ${matchedCrypto.networks.length > 0 ? 'compatible' : 'incompatible'}`}\r\n                                {...(matchedCrypto.networks.length > 0 ? { onClick: () => { this.props.onClick(matchedCrypto.crypto) } } : {})}\r\n                            >\r\n                                {matchedCrypto.networks.length === 0 &&\r\n                                    <div className=\"unavailable-tag\">\r\n                                        No disponible\r\n                                    </div>\r\n                                }\r\n                                <div className=\"crypto-logo\">\r\n                                    <img className=\"imagen-logo\" src={matchedCrypto.crypto.image} alt={`${matchedCrypto.crypto.name} logo`} />\r\n                                </div>\r\n                                <div className=\"crypto-info\">\r\n                                    <div className=\"crypto-name\">{matchedCrypto.crypto.name}</div>\r\n                                    <div className=\"crypto-symbol\">{matchedCrypto.crypto.symbol}</div>\r\n                                    <div className=\"crypto-networks\">\r\n                                        {matchedCrypto.networks.map((network, networkIndex) => (\r\n                                            <div key={networkIndex} className=\"crypto-network\">\r\n                                                <Image src={network.image} alt={`${network.name} network logo`} width={20} height={20} />\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\selectorWalletsExchanges.tsx",["94","95"],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\stepper.tsx",[],[],"C:\\Users\\Developer\\Desktop\\deployTomas\\front-end\\components\\index.tsx",["96","97","98","99"],[],{"ruleId":"100","severity":1,"message":"101","line":7,"column":5,"nodeType":"102","endLine":7,"endColumn":37},{"ruleId":"103","severity":1,"message":"104","line":12,"column":4,"nodeType":"105","endLine":12,"endColumn":134},{"ruleId":"106","severity":1,"message":"107","line":746,"column":33,"nodeType":"105","endLine":746,"endColumn":96},{"ruleId":"106","severity":1,"message":"107","line":761,"column":33,"nodeType":"105","endLine":761,"endColumn":95},{"ruleId":"106","severity":1,"message":"107","line":904,"column":21,"nodeType":"105","endLine":904,"endColumn":64},{"ruleId":"108","severity":1,"message":"109","line":904,"column":21,"nodeType":"105","endLine":904,"endColumn":64},{"ruleId":"106","severity":1,"message":"107","line":1272,"column":17,"nodeType":"105","endLine":1272,"endColumn":97},{"ruleId":"108","severity":1,"message":"109","line":1272,"column":17,"nodeType":"105","endLine":1272,"endColumn":97},{"ruleId":"106","severity":1,"message":"107","line":1463,"column":33,"nodeType":"105","endLine":1463,"endColumn":129},{"ruleId":"106","severity":1,"message":"107","line":1528,"column":33,"nodeType":"105","endLine":1528,"endColumn":134},{"ruleId":"106","severity":1,"message":"107","line":52,"column":29,"nodeType":"105","endLine":52,"endColumn":114},{"ruleId":"106","severity":1,"message":"107","line":76,"column":29,"nodeType":"105","endLine":76,"endColumn":114},{"ruleId":"106","severity":1,"message":"107","line":99,"column":29,"nodeType":"105","endLine":99,"endColumn":114},{"ruleId":"106","severity":1,"message":"107","line":102,"column":37,"nodeType":"105","endLine":102,"endColumn":143},{"ruleId":"106","severity":1,"message":"107","line":84,"column":37,"nodeType":"105","endLine":84,"endColumn":102},{"ruleId":"106","severity":1,"message":"107","line":101,"column":37,"nodeType":"105","endLine":101,"endColumn":100},{"ruleId":"110","severity":1,"message":"111","line":112,"column":8,"nodeType":"112","endLine":112,"endColumn":90,"suggestions":"113"},{"ruleId":"110","severity":1,"message":"114","line":394,"column":8,"nodeType":"112","endLine":394,"endColumn":27,"suggestions":"115"},{"ruleId":"106","severity":1,"message":"107","line":524,"column":41,"nodeType":"105","endLine":524,"endColumn":118},{"ruleId":"106","severity":1,"message":"107","line":543,"column":37,"nodeType":"105","endLine":543,"endColumn":107},"@next/next/no-title-in-document-head","Do not use `<title>` element with `<Head />` component from `next/document`. Titles should defined at the page-level using `<Head />` from `next/head` instead. See: https://nextjs.org/docs/messages/no-title-in-document-head","JSXElement","@next/next/google-font-display","A font-display parameter is missing (adding `&display=optional` is recommended). See: https://nextjs.org/docs/messages/google-font-display","JSXOpeningElement","@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'selectedCrypto' and 'walletSelectionAttempted'. Either include them or remove the dependency array.","ArrayExpression",["116"],"React Hook useEffect has a missing dependency: 'sendTransaction2'. Either include it or remove the dependency array.",["117"],{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [isLoading, isConnected, isCancelled, errorConexion, connectionError, stepChanged, walletSelectionAttempted, selectedCrypto]",{"range":"122","text":"123"},"Update the dependencies array to be: [executeTransation, sendTransaction2]",{"range":"124","text":"125"},[4536,4618],"[isLoading, isConnected, isCancelled, errorConexion, connectionError, stepChanged, walletSelectionAttempted, selectedCrypto]",[14516,14535],"[executeTransation, sendTransaction2]"]